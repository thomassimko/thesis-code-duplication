[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for thesis:thesis:jar:1.0-SNAPSHOT
[WARNING] 'dependencies.dependency.version' for org.junit.jupiter:junit-jupiter-api:jar is either LATEST or RELEASE (both of them are being deprecated) @ line 25, column 22
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building thesis 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.2.1:java (default-cli) > validate @ thesis >>>
[INFO] 
[INFO] <<< exec-maven-plugin:1.2.1:java (default-cli) < validate @ thesis <<<
[INFO] 
[INFO] 
[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ thesis ---
BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL1
this.radius : this.radius = 0, 
this.angle : this.angle = 0, 

BLOCK: Startconstructor2L3
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL4
this.angle : this.angle = angle, 
this.radius : this.radius = radius, 

BLOCK: trueL6
this.angle : this.angle = this.angle - 180.0, 
this.radius : this.radius = this.radius * 1, 

BLOCK: joinL7
this.angle : this.angle = this.angle - 180.0, this.angle = angle, 
this.radius : this.radius = this.radius * 1, this.radius = radius, 

BLOCK: trueL8
this.angle : this.angle = this.angle + 360, 
this.radius : this.radius = this.radius * 1, this.radius = radius, 

BLOCK: joinL9
this.angle : this.angle = this.angle - 180.0, this.angle = this.angle + 360, this.angle = angle, 
this.radius : this.radius = this.radius * 1, this.radius = radius, 

BLOCK: StartxCoordinateL10
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL11
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL13
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL14
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartradiusL16
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL17
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL19
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL20
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: Startrotate90L22
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL23
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartdistanceL25

BLOCK: BasicL26

BLOCK: StartquadrantL28

BLOCK: BasicL29
p1_y : p1_y = false, 
p1_x : p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL31
p1_y : p1_y = false, 
p1_x : p1_x = true, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: falseL33
p1_y : p1_y = false, 
p1_x : p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: joinL32
p1_y : p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL34
p1_y : p1_y = true, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: falseL36
p1_y : p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: joinL35
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL37
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_x : p2_x = true, 
p2_y : p2_y = false, 
p1_quad : p1_quad = 0, 

BLOCK: falseL39
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_x : p2_x = false, 
p2_y : p2_y = false, 
p1_quad : p1_quad = 0, 

BLOCK: joinL38
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_x : p2_x = true, p2_x = false, 
p2_y : p2_y = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL40
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: falseL42
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: joinL41
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL43
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, 

BLOCK: falseL45
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL46
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 2, 

BLOCK: falseL48
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL49
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 3, 

BLOCK: falseL51
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL52
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 4, 

BLOCK: falseL54
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, 

BLOCK: joinL53
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 4, 

BLOCK: joinL50
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL47
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL44
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL55
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL57
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL58
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 2, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL60
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL61
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 3, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL63
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL64
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 4, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL66
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL65
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL62
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL59
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL56
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL67
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL69
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL68
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: StartmainL70

BLOCK: BasicL71
p1_y : p1_y = 0, 
p1_x : p1_x = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL73
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL75
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: trueL77
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL79
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL78
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL80
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL81
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: trueL83
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL85
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL84
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL86
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: joinL82
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = false, 
dist : dist = distance(p1, p2, ), dist = 0, 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL76
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = user_input.nextDouble(), p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = false, quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), dist = 0, dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL87
p1_y : p1_y = 0, 
p1_x : p1_x = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL88
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL90
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: trueL92
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL94
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL93
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL95
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL96
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: trueL98
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL100
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL99
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL101
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: joinL97
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), 
p2_x : p2_x = 0, p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = false, quad = quadrant(p1, p2, ), 
dist : dist = 0, dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL91
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = 0, p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = false, quad = quadrant(p1, p2, ), 
dist : dist = 0, dist = distance(p1, p2, ), dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL102
p1_y : p1_y = 0, 
p1_x : p1_x = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: joinL89
p1_y : p1_y = 0, p1_y = user_input.nextDouble(), 
p1_x : p1_x = 0, p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = 0, p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = false, quad = quadrant(p1, p2, ), 
dist : dist = 0, dist = distance(p1, p2, ), dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), point_type = user_input.nextInt(), 

BLOCK: joinL74
p1_y : p1_y = 0, p1_y = user_input.nextDouble(), p1_y = user_input.nextDouble(), 
p1_x : p1_x = 0, p1_x = user_input.nextDouble(), p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), p1 = new CartesianPoint(0, 0, ), p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = user_input.nextDouble(), p2_x = user_input.nextDouble(), p2_x = 0, p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = quadrant(p1, p2, ), quad = false, quad = quadrant(p1, p2, ), quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), dist = 0, dist = distance(p1, p2, ), dist = distance(p1, p2, ), dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), point_type = user_input.nextInt(), point_type = user_input.nextInt(), 

BLOCK: StartmainL103

BLOCK: BasicL104
p2 : p2 = new PolarPoint(5.0, 53.130104, ), 
p2r : p2r = p2.rotate90(), 
p1 : p1 = new PolarPoint(0, 0, ), 
p1r : p1r = p1.rotate90(), 
p3 : p3 = new PolarPoint(-5.0, 237.32484, ), 
p4 : p4 = new PolarPoint(5.0, -302.67517, ), 

BLOCK: Startconstructor1L106
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL107
this.x_coord : this.x_coord = 0, 
this.y_coord : this.y_coord = 0, 

BLOCK: Startconstructor2L109
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL110
this.x_coord : this.x_coord = x_coord, 
this.y_coord : this.y_coord = y_coord, 

BLOCK: StartxCoordinateL112
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL113
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: StartyCoordinateL115
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: BasicL116
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: StartradiusL118
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL119
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: StartangleL121
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL122
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: Startrotate90L124
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: BasicL125
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: trueL127
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: falseL129
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: trueL130
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: falseL132
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: trueL133
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: falseL135
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: trueL136
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: falseL138
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: joinL137
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: joinL134
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: joinL131
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: joinL128
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: StartmainL139

BLOCK: BasicL140
test1r : test1r = test1.rotate90(), 
test1 : test1 = new CartesianPoint(0, 0, ), 
test2r : test2r = test2.rotate90(), 
test2 : test2 = new CartesianPoint(3, 4, ), 

BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL1
this.radius : this.radius = 0, 
this.angle : this.angle = 0, 

BLOCK: Startconstructor2L3
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: Startconstructor2L3
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL4
this.angle : this.angle = angle, 
this.radius : this.radius = radius, 

BLOCK: trueL6
this.angle : this.angle = this.angle - 180.0, 
this.radius : this.radius = this.radius * 1, 

BLOCK: joinL7
this.angle : this.angle = this.angle - 180.0, this.angle = angle, 
this.radius : this.radius = this.radius * 1, this.radius = radius, 

BLOCK: trueL8
this.angle : this.angle = this.angle + 360, 
this.radius : this.radius = this.radius * 1, this.radius = radius, 

BLOCK: joinL9
this.angle : this.angle = this.angle - 180.0, this.angle = this.angle + 360, this.angle = angle, 
this.radius : this.radius = this.radius * 1, this.radius = radius, 

BLOCK: StartxCoordinateL10
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartxCoordinateL10
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL11
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL13
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartyCoordinateL13
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL14
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartradiusL16
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL16
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL17
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL19
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartangleL19
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL20
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: Startrotate90L22
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: Startrotate90L22
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL23
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartdistanceL25

BLOCK: StartdistanceL25

BLOCK: BasicL26

BLOCK: StartquadrantL28

BLOCK: StartquadrantL28

BLOCK: BasicL29
p1_y : p1_y = false, 
p1_x : p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL31
p1_y : p1_y = false, 
p1_x : p1_x = true, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: falseL33
p1_y : p1_y = false, 
p1_x : p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: joinL32
p1_y : p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL34
p1_y : p1_y = true, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: falseL36
p1_y : p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: joinL35
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL37
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_x : p2_x = true, 
p2_y : p2_y = false, 
p1_quad : p1_quad = 0, 

BLOCK: falseL39
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_x : p2_x = false, 
p2_y : p2_y = false, 
p1_quad : p1_quad = 0, 

BLOCK: joinL38
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_x : p2_x = true, p2_x = false, 
p2_y : p2_y = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL40
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: falseL42
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: joinL41
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL43
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, 

BLOCK: falseL45
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL46
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 2, 

BLOCK: falseL48
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL49
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 3, 

BLOCK: falseL51
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 0, 

BLOCK: trueL52
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 4, 

BLOCK: falseL54
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, 

BLOCK: joinL53
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 4, 

BLOCK: joinL50
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL47
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL44
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL55
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL57
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL58
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 2, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL60
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL61
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 3, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL63
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 0, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL64
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 4, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL66
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL65
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL62
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL59
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL56
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: trueL67
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: falseL69
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: joinL68
p1_y : p1_y = true, p1_y = false, 
p1_x : p1_x = true, p1_x = false, 
p2_quad : p2_quad = 1, p2_quad = 2, p2_quad = 3, p2_quad = 4, p2_quad = 1, 
p2_y : p2_y = true, p2_y = false, 
p2_x : p2_x = true, p2_x = false, 
p1_quad : p1_quad = 1, p1_quad = 2, p1_quad = 1, p1_quad = 3, p1_quad = 4, 

BLOCK: StartmainL70

BLOCK: StartmainL70

BLOCK: BasicL71
p1_y : p1_y = 0, 
p1_x : p1_x = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL73
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL75
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: trueL77
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL79
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL78
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL80
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL81
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: trueL83
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL85
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL84
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL86
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: joinL82
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = false, 
dist : dist = distance(p1, p2, ), dist = 0, 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL76
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = user_input.nextDouble(), p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = false, quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), dist = 0, dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL87
p1_y : p1_y = 0, 
p1_x : p1_x = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL88
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL90
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: trueL92
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL94
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL93
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL95
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: trueL96
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: trueL98
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL100
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL99
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL101
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: joinL97
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), 
p2_x : p2_x = 0, p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = false, quad = quadrant(p1, p2, ), 
dist : dist = 0, dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: joinL91
p1_y : p1_y = user_input.nextDouble(), 
p1_x : p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = 0, p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = false, quad = quadrant(p1, p2, ), 
dist : dist = 0, dist = distance(p1, p2, ), dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), 

BLOCK: falseL102
p1_y : p1_y = 0, 
p1_x : p1_x = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new PolarPoint(0, 0, ), 
p2_y : p2_y = 0, 
p2_x : p2_x = 0, 
user_input : user_input = new Scanner(System.in, ), 
point_type : point_type = user_input.nextInt(), 
quad : quad = false, 
dist : dist = 0, 

BLOCK: joinL89
p1_y : p1_y = 0, p1_y = user_input.nextDouble(), 
p1_x : p1_x = 0, p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = 0, p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = false, quad = quadrant(p1, p2, ), 
dist : dist = 0, dist = distance(p1, p2, ), dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), point_type = user_input.nextInt(), 

BLOCK: joinL74
p1_y : p1_y = 0, p1_y = user_input.nextDouble(), p1_y = user_input.nextDouble(), 
p1_x : p1_x = 0, p1_x = user_input.nextDouble(), p1_x = user_input.nextDouble(), 
p1 : p1 = new PolarPoint(p1_x, p1_y, ), p1 = new CartesianPoint(0, 0, ), p1 = new CartesianPoint(p1_x, p1_y, ), 
p2 : p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new CartesianPoint(p2_x, p2_y, ), p2 = new PolarPoint(0, 0, ), p2 = new PolarPoint(p2_x, p2_y, ), p2 = new PolarPoint(p2_x, p2_y, ), 
p2_y : p2_y = 0, p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), p2_y = user_input.nextDouble(), 
p2_x : p2_x = user_input.nextDouble(), p2_x = user_input.nextDouble(), p2_x = user_input.nextDouble(), p2_x = 0, p2_x = user_input.nextDouble(), 
user_input : user_input = new Scanner(System.in, ), 
quad : quad = quadrant(p1, p2, ), quad = quadrant(p1, p2, ), quad = false, quad = quadrant(p1, p2, ), quad = quadrant(p1, p2, ), 
dist : dist = distance(p1, p2, ), dist = 0, dist = distance(p1, p2, ), dist = distance(p1, p2, ), dist = distance(p1, p2, ), 
point_type : point_type = user_input.nextInt(), point_type = user_input.nextInt(), point_type = user_input.nextInt(), 

BLOCK: StartmainL103

BLOCK: StartmainL103

BLOCK: BasicL104
p2 : p2 = new PolarPoint(5.0, 53.130104, ), 
p2r : p2r = p2.rotate90(), 
p1 : p1 = new PolarPoint(0, 0, ), 
p1r : p1r = p1.rotate90(), 
p3 : p3 = new PolarPoint(-5.0, 237.32484, ), 
p4 : p4 = new PolarPoint(5.0, -302.67517, ), 

BLOCK: Startconstructor1L106
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: Startconstructor1L106
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL107
this.x_coord : this.x_coord = 0, 
this.y_coord : this.y_coord = 0, 

BLOCK: Startconstructor2L109
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: Startconstructor2L109
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL110
this.x_coord : this.x_coord = x_coord, 
this.y_coord : this.y_coord = y_coord, 

BLOCK: StartxCoordinateL112
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: StartxCoordinateL112
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL113
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: StartyCoordinateL115
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: StartyCoordinateL115
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: BasicL116
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: StartradiusL118
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: StartradiusL118
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL119
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: StartangleL121
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: StartangleL121
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: BasicL122
this.x_coord : this.x_coord = 0.0, 
this.y_coord : this.y_coord = 0.0, 

BLOCK: Startrotate90L124
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: Startrotate90L124
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: BasicL125
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: trueL127
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: falseL129
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: trueL130
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: falseL132
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: trueL133
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: falseL135
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: trueL136
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: falseL138
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: joinL137
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: joinL134
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: joinL131
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: joinL128
this.y_coord : this.y_coord = 0.0, 
this.x_coord : this.x_coord = 0.0, 

BLOCK: StartmainL139

BLOCK: StartmainL139

BLOCK: BasicL140
test1r : test1r = test1.rotate90(), 
test1 : test1 = new CartesianPoint(0, 0, ), 
test2r : test2r = test2.rotate90(), 
test2 : test2 = new CartesianPoint(3, 4, ), 

Unfiltered: 48832
Filtered: 10


Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 202] and 102_Code/102_hw1/dir12/PointRelation.java lines [107, 208]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
126 :	p1 = new CartesianPoint(p1_x, p1_y, )
134 :	p2_x = user_input.nextDouble()
136 :	p2_y = user_input.nextDouble()
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
141 :	quad = quadrant(p1, p2, )
144 :	quad == true
198 :	p2_x = user_input.nextDouble()
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
102_Code/102_hw1/dir12/PointRelation.java ----------
107 :	p1_x = 0
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
188 :	p1_y = user_input.nextDouble()
186 :	p1_x = user_input.nextDouble()
190 :	p1 = new PolarPoint(p1_x, p1_y, )
205 :	quad = quadrant(p1, p2, )
208 :	quad == true
124 :	p1_y = user_input.nextDouble()
122 :	p1_x = user_input.nextDouble()
126 :	p1 = new CartesianPoint(p1_x, p1_y, )
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 202] and 102_Code/102_hw1/dir12/PointRelation.java lines [107, 231]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
126 :	p1 = new CartesianPoint(p1_x, p1_y, )
134 :	p2_x = user_input.nextDouble()
136 :	p2_y = user_input.nextDouble()
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
141 :	quad = quadrant(p1, p2, )
144 :	quad == true
198 :	p2_x = user_input.nextDouble()
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
102_Code/102_hw1/dir12/PointRelation.java ----------
107 :	p1_x = 0
225 :	p2 = new PolarPoint(p2_x, p2_y, )
188 :	p1_y = user_input.nextDouble()
186 :	p1_x = user_input.nextDouble()
190 :	p1 = new PolarPoint(p1_x, p1_y, )
228 :	quad = quadrant(p1, p2, )
231 :	quad == true
124 :	p1_y = user_input.nextDouble()
122 :	p1_x = user_input.nextDouble()
126 :	p1 = new CartesianPoint(p1_x, p1_y, )
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [12, 63] and 102_Code/102_hw1/dir12/PointRelation.java lines [12, 84]
102_Code/102_hw1/dir12/PointRelation.java ----------
12 :	p1_x = false
17 :	p1_x = true
21 :	p1_x = false
26 :	p1_y = true
30 :	p1_y = false
51 :	p1_x == true && p1_y == true
55 :	p1_x == false && p1_y == true
59 :	p1_x == false && p1_y == false
63 :	p1_x == true && p1_y == false
102_Code/102_hw1/dir12/PointRelation.java ----------
12 :	p2_x = false
35 :	p2_x = true
39 :	p2_x = false
44 :	p2_y = true
48 :	p2_y = false
76 :	p2_x == false && p2_y == true
72 :	p2_x == true && p2_y == true
84 :	p2_x == true && p2_y == false
80 :	p2_x == false && p2_y == false
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 223] and 102_Code/102_hw1/dir12/PointRelation.java lines [109, 198]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
134 :	p2_x = user_input.nextDouble()
136 :	p2_y = user_input.nextDouble()
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
198 :	p2_x = user_input.nextDouble()
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
223 :	p2_y = user_input.nextDouble()
102_Code/102_hw1/dir12/PointRelation.java ----------
109 :	p2_x = 0
159 :	p2_y = user_input.nextDouble()
157 :	p2_x = user_input.nextDouble()
161 :	p2 = new PolarPoint(p2_x, p2_y, )
136 :	p2_y = user_input.nextDouble()
134 :	p2_x = user_input.nextDouble()
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
198 :	p2_x = user_input.nextDouble()
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 223] and 102_Code/102_hw1/dir12/PointRelation.java lines [109, 202]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
134 :	p2_x = user_input.nextDouble()
136 :	p2_y = user_input.nextDouble()
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
198 :	p2_x = user_input.nextDouble()
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
223 :	p2_y = user_input.nextDouble()
102_Code/102_hw1/dir12/PointRelation.java ----------
109 :	p2_x = 0
200 :	p2_y = user_input.nextDouble()
198 :	p2_x = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
136 :	p2_y = user_input.nextDouble()
134 :	p2_x = user_input.nextDouble()
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
157 :	p2_x = user_input.nextDouble()
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 223] and 102_Code/102_hw1/dir12/PointRelation.java lines [109, 221]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
134 :	p2_x = user_input.nextDouble()
136 :	p2_y = user_input.nextDouble()
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
198 :	p2_x = user_input.nextDouble()
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
223 :	p2_y = user_input.nextDouble()
102_Code/102_hw1/dir12/PointRelation.java ----------
109 :	p2_x = 0
200 :	p2_y = user_input.nextDouble()
198 :	p2_x = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
159 :	p2_y = user_input.nextDouble()
157 :	p2_x = user_input.nextDouble()
161 :	p2 = new PolarPoint(p2_x, p2_y, )
221 :	p2_x = user_input.nextDouble()
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 223] and 102_Code/102_hw1/dir12/PointRelation.java lines [109, 225]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
134 :	p2_x = user_input.nextDouble()
136 :	p2_y = user_input.nextDouble()
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
198 :	p2_x = user_input.nextDouble()
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
223 :	p2_y = user_input.nextDouble()
102_Code/102_hw1/dir12/PointRelation.java ----------
109 :	p2_x = 0
200 :	p2_y = user_input.nextDouble()
198 :	p2_x = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
223 :	p2_y = user_input.nextDouble()
221 :	p2_x = user_input.nextDouble()
225 :	p2 = new PolarPoint(p2_x, p2_y, )
134 :	p2_x = user_input.nextDouble()
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 205] and 102_Code/102_hw1/dir12/PointRelation.java lines [107, 190]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
114 :	p2 = new PolarPoint(0, 0, )
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
190 :	p1 = new PolarPoint(p1_x, p1_y, )
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
205 :	quad = quadrant(p1, p2, )
102_Code/102_hw1/dir12/PointRelation.java ----------
107 :	p1_x = 0
113 :	p1 = new CartesianPoint(0, 0, )
190 :	p1 = new PolarPoint(p1_x, p1_y, )
161 :	p2 = new PolarPoint(p2_x, p2_y, )
122 :	p1_x = user_input.nextDouble()
126 :	p1 = new CartesianPoint(p1_x, p1_y, )
164 :	quad = quadrant(p1, p2, )
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 205] and 102_Code/102_hw1/dir12/PointRelation.java lines [107, 227]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
114 :	p2 = new PolarPoint(0, 0, )
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
190 :	p1 = new PolarPoint(p1_x, p1_y, )
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
205 :	quad = quadrant(p1, p2, )
102_Code/102_hw1/dir12/PointRelation.java ----------
107 :	p1_x = 0
113 :	p1 = new CartesianPoint(0, 0, )
126 :	p1 = new CartesianPoint(p1_x, p1_y, )
225 :	p2 = new PolarPoint(p2_x, p2_y, )
186 :	p1_x = user_input.nextDouble()
190 :	p1 = new PolarPoint(p1_x, p1_y, )
227 :	dist = distance(p1, p2, )
===========================



Duplicate found: 102_Code/102_hw1/dir12/PointRelation.java lines [110, 205] and 102_Code/102_hw1/dir12/PointRelation.java lines [107, 228]
102_Code/102_hw1/dir12/PointRelation.java ----------
110 :	p2_y = 0
114 :	p2 = new PolarPoint(0, 0, )
138 :	p2 = new CartesianPoint(p2_x, p2_y, )
190 :	p1 = new PolarPoint(p1_x, p1_y, )
200 :	p2_y = user_input.nextDouble()
202 :	p2 = new CartesianPoint(p2_x, p2_y, )
205 :	quad = quadrant(p1, p2, )
102_Code/102_hw1/dir12/PointRelation.java ----------
107 :	p1_x = 0
113 :	p1 = new CartesianPoint(0, 0, )
126 :	p1 = new CartesianPoint(p1_x, p1_y, )
225 :	p2 = new PolarPoint(p2_x, p2_y, )
186 :	p1_x = user_input.nextDouble()
190 :	p1 = new PolarPoint(p1_x, p1_y, )
228 :	quad = quadrant(p1, p2, )
===========================



[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 03:23 min
[INFO] Finished at: 2019-05-06T19:51:03-07:00
[INFO] Final Memory: 21M/1660M
[INFO] ------------------------------------------------------------------------
