[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for thesis:thesis:jar:1.0-SNAPSHOT
[WARNING] 'dependencies.dependency.version' for org.junit.jupiter:junit-jupiter-api:jar is either LATEST or RELEASE (both of them are being deprecated) @ line 25, column 22
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building thesis 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.2.1:java (default-cli) > validate @ thesis >>>
[INFO] 
[INFO] <<< exec-maven-plugin:1.2.1:java (default-cli) < validate @ thesis <<<
[INFO] 
[INFO] 
[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ thesis ---
BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL1
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: LoopL3
this.radius : this.radius = 0.0, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL4
this.radius : this.radius = 0.0, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = 0.0, 

BLOCK: trueL5
this.radius : this.radius = r, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = a + Math.PI, 

BLOCK: falseL7
this.radius : this.radius = r, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = a, 

BLOCK: joinL6
this.radius : this.radius = r, this.radius = r, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = a, this.angle = a + Math.PI, 

BLOCK: StartxCoordinateL8
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL9
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL11
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL12
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL14
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL15
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL17
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL18
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: Startrotate90L20
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL21
p90 : p90 = new PolarPoint(this.radius, this.angle + Math.PI / 2, ), 
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartmainL23

BLOCK: BasicL24
tempDeg : tempDeg = 0, 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, 
tempX : tempX = 0, 
boo : boo = false, 
tempY : tempY = 0, 
tempA : tempA = 0, 
readP : readP = 0, 
p1 : p1 = new CartesianPoint(tempX, tempY, ), 
p2 : p2 = new CartesianPoint(tempX, tempY, ), 
distance : distance = 0.0, 

BLOCK: ForInitL26
tempDeg : tempDeg = 0, 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, 
tempX : tempX = 0, 
i : i = 1, 
boo : boo = false, 
tempY : tempY = 0, 
tempA : tempA = 0, 
readP : readP = 0, 
p1 : p1 = new CartesianPoint(tempX, tempY, ), 
p2 : p2 = new CartesianPoint(tempX, tempY, ), 
distance : distance = 0.0, 

BLOCK: ForCondL27
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: LoopL28
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: BasicL29
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL30
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL32
tempX : tempX = Scan.nextDouble(), 
i : i = 1, i = i + 1, 
tempY : tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL33
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL34
tempX : tempX = Scan.nextDouble(), 
i : i = 1, i = i + 1, 
tempY : tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL35
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: falseL36
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL37
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL39
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), 

BLOCK: joinL40
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL41
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new PolarPoint(tempR, tempA, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL42
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: falseL43
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL38
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL31
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = i + 1, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
@temp1 : @temp1 = i, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL44
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL45
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL46
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL47
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: StartdistancePointsL48

BLOCK: BasicL49

BLOCK: StartsameQuadL51

BLOCK: BasicL52

BLOCK: trueL54

BLOCK: joinL55

BLOCK: trueL56

BLOCK: joinL57

BLOCK: trueL58

BLOCK: joinL59

BLOCK: trueL60

BLOCK: falseL62

BLOCK: joinL61

BLOCK: StartmainL63

BLOCK: BasicL64
p5 : p5 = new PolarPoint(5, Math.PI, ), 
p4 : p4 = p3.rotate90(), 
p6 : p6 = p5.rotate90(), 
p3 : p3 = new PolarPoint(1, Math.PI / 2, ), 
p2 : p2 = p1.rotate90(), 
p1 : p1 = new PolarPoint(3, Math.PI / 4, ), 

BLOCK: Startconstructor1L66
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL67
this.y : this.y = yCoord, 
this.x : this.x = xCoord, 

BLOCK: StartxCoordinateL69
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL70
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartyCoordinateL72
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL73
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartradiusL75
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL76
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartangleL78
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL79
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startrotate90L81
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL82
p90 : p90 = new CartesianPoint(-this.y, this.x, ), 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartmainL84

BLOCK: BasicL85
p6 : p6 = p5.rotate90(), 
p2 : p2 = p1.rotate90(), 
p5 : p5 = new CartesianPoint(-2, -4, ), 
p1 : p1 = new CartesianPoint(3, 5, ), 
p4 : p4 = p3.rotate90(), 
p3 : p3 = new CartesianPoint(5, 7, ), 

BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL1
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: LoopL3
this.radius : this.radius = 0.0, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL4
this.radius : this.radius = 0.0, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = 0.0, 

BLOCK: trueL5
this.radius : this.radius = r, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = a + Math.PI, 

BLOCK: falseL7
this.radius : this.radius = r, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = a, 

BLOCK: joinL6
this.radius : this.radius = r, this.radius = r, 
a : a = a + 2 * Math.PI, 
this.angle : this.angle = a, this.angle = a + Math.PI, 

BLOCK: StartxCoordinateL8
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartxCoordinateL8
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL9
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL11
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL11
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL12
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL14
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL14
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL15
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL17
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL17
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL18
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: Startrotate90L20
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: Startrotate90L20
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL21
p90 : p90 = new PolarPoint(this.radius, this.angle + Math.PI / 2, ), 
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartmainL23

BLOCK: StartmainL23

BLOCK: BasicL24
tempDeg : tempDeg = 0, 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, 
tempX : tempX = 0, 
boo : boo = false, 
tempY : tempY = 0, 
tempA : tempA = 0, 
readP : readP = 0, 
p1 : p1 = new CartesianPoint(tempX, tempY, ), 
p2 : p2 = new CartesianPoint(tempX, tempY, ), 
distance : distance = 0.0, 

BLOCK: ForInitL26
tempDeg : tempDeg = 0, 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, 
tempX : tempX = 0, 
i : i = 1, 
boo : boo = false, 
tempY : tempY = 0, 
tempA : tempA = 0, 
readP : readP = 0, 
p1 : p1 = new CartesianPoint(tempX, tempY, ), 
p2 : p2 = new CartesianPoint(tempX, tempY, ), 
distance : distance = 0.0, 

BLOCK: ForCondL27
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: LoopL28
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: BasicL29
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL30
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL32
tempX : tempX = Scan.nextDouble(), 
i : i = 1, i = i + 1, 
tempY : tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL33
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL34
tempX : tempX = Scan.nextDouble(), 
i : i = 1, i = i + 1, 
tempY : tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL35
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: falseL36
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL37
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL39
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), 

BLOCK: joinL40
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL41
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new PolarPoint(tempR, tempA, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL42
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: falseL43
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL38
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = false, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL31
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = i + 1, 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
boo : boo = false, 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
@temp1 : @temp1 = i, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
distance : distance = 0.0, 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL44
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL45
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: trueL46
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: joinL47
tempX : tempX = Scan.nextDouble(), tempX = Scan.nextDouble(), tempX = 0, 
i : i = 1, i = i + 1, 
boo : boo = sameQuad(p1, p2, ), 
tempY : tempY = Scan.nextDouble(), tempY = 0, tempY = Scan.nextDouble(), 
tempA : tempA = tempDeg * Math.PI / 180, tempA = 0, tempA = tempDeg * Math.PI / 180, 
p2 : p2 = new CartesianPoint(tempX, tempY, ), p2 = new PolarPoint(tempR, tempA, ), p2 = new CartesianPoint(tempX, tempY, ), 
@temp1 : @temp1 = i, 
distance : distance = distancePoints(p1, p2, ), 
tempDeg : tempDeg = 0, tempDeg = Scan.nextDouble(), tempDeg = Scan.nextDouble(), 
Scan : Scan = new Scanner(System.in, ), 
tempR : tempR = 0, tempR = Scan.nextDouble(), tempR = Scan.nextDouble(), 
readP : readP = 0, readP = Scan.nextInt(), 
p1 : p1 = new PolarPoint(tempR, tempA, ), p1 = new CartesianPoint(tempX, tempY, ), p1 = new CartesianPoint(tempX, tempY, ), 

BLOCK: StartdistancePointsL48

BLOCK: StartdistancePointsL48

BLOCK: BasicL49

BLOCK: StartsameQuadL51

BLOCK: StartsameQuadL51

BLOCK: BasicL52

BLOCK: trueL54

BLOCK: joinL55

BLOCK: trueL56

BLOCK: joinL57

BLOCK: trueL58

BLOCK: joinL59

BLOCK: trueL60

BLOCK: falseL62

BLOCK: joinL61

BLOCK: StartmainL63

BLOCK: StartmainL63

BLOCK: BasicL64
p5 : p5 = new PolarPoint(5, Math.PI, ), 
p4 : p4 = p3.rotate90(), 
p6 : p6 = p5.rotate90(), 
p3 : p3 = new PolarPoint(1, Math.PI / 2, ), 
p2 : p2 = p1.rotate90(), 
p1 : p1 = new PolarPoint(3, Math.PI / 4, ), 

BLOCK: Startconstructor1L66
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startconstructor1L66
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL67
this.y : this.y = yCoord, 
this.x : this.x = xCoord, 

BLOCK: StartxCoordinateL69
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartxCoordinateL69
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL70
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartyCoordinateL72
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartyCoordinateL72
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL73
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartradiusL75
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartradiusL75
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL76
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartangleL78
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartangleL78
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL79
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startrotate90L81
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startrotate90L81
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL82
p90 : p90 = new CartesianPoint(-this.y, this.x, ), 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartmainL84

BLOCK: StartmainL84

BLOCK: BasicL85
p6 : p6 = p5.rotate90(), 
p2 : p2 = p1.rotate90(), 
p5 : p5 = new CartesianPoint(-2, -4, ), 
p1 : p1 = new CartesianPoint(3, 5, ), 
p4 : p4 = p3.rotate90(), 
p3 : p3 = new CartesianPoint(5, 7, ), 

Unfiltered: 394
Filtered: 2


Duplicate found: 102_Code/102_hw1/dir08/PointRelation.java lines [9, 76] and 102_Code/102_hw1/dir08/PointRelation.java lines [9, 76]
102_Code/102_hw1/dir08/PointRelation.java ----------
9 :	tempY = 0
11 :	p2 = new CartesianPoint(tempX, tempY, )
24 :	tempX = Scan.nextDouble()
27 :	tempY = Scan.nextDouble()
29 :	p1 = new CartesianPoint(tempX, tempY, )
34 :	tempX = Scan.nextDouble()
37 :	tempY = Scan.nextDouble()
39 :	p2 = new CartesianPoint(tempX, tempY, )
51 :	tempA = tempDeg * Math.PI / 180
53 :	p1 = new PolarPoint(tempR, tempA, )
58 :	tempR = Scan.nextDouble()
61 :	tempDeg = Scan.nextDouble()
73 :	distance = distancePoints(p1, p2, )
76 :	boo = sameQuad(p1, p2, )
102_Code/102_hw1/dir08/PointRelation.java ----------
9 :	tempR = 0
10 :	p1 = new CartesianPoint(tempX, tempY, )
37 :	tempY = Scan.nextDouble()
34 :	tempX = Scan.nextDouble()
39 :	p2 = new CartesianPoint(tempX, tempY, )
27 :	tempY = Scan.nextDouble()
24 :	tempX = Scan.nextDouble()
29 :	p1 = new CartesianPoint(tempX, tempY, )
62 :	tempA = tempDeg * Math.PI / 180
64 :	p2 = new PolarPoint(tempR, tempA, )
50 :	tempDeg = Scan.nextDouble()
47 :	tempR = Scan.nextDouble()
76 :	boo = sameQuad(p1, p2, )
73 :	distance = distancePoints(p1, p2, )
===========================



Duplicate found: 102_Code/102_hw1/dir08/PointRelation.java lines [9, 81] and 102_Code/102_hw1/dir08/PointRelation.java lines [9, 77]
102_Code/102_hw1/dir08/PointRelation.java ----------
9 :	tempY = 0
11 :	p2 = new CartesianPoint(tempX, tempY, )
24 :	tempX = Scan.nextDouble()
27 :	tempY = Scan.nextDouble()
29 :	p1 = new CartesianPoint(tempX, tempY, )
37 :	tempY = Scan.nextDouble()
51 :	tempA = tempDeg * Math.PI / 180
53 :	p1 = new PolarPoint(tempR, tempA, )
58 :	tempR = Scan.nextDouble()
61 :	tempDeg = Scan.nextDouble()
81 :	boo == false
102_Code/102_hw1/dir08/PointRelation.java ----------
9 :	tempR = 0
10 :	p1 = new CartesianPoint(tempX, tempY, )
37 :	tempY = Scan.nextDouble()
34 :	tempX = Scan.nextDouble()
39 :	p2 = new CartesianPoint(tempX, tempY, )
24 :	tempX = Scan.nextDouble()
62 :	tempA = tempDeg * Math.PI / 180
64 :	p2 = new PolarPoint(tempR, tempA, )
50 :	tempDeg = Scan.nextDouble()
47 :	tempR = Scan.nextDouble()
77 :	boo == true
===========================



[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.270 s
[INFO] Finished at: 2019-05-01T17:11:19-07:00
[INFO] Final Memory: 17M/1309M
[INFO] ------------------------------------------------------------------------
