[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for thesis:thesis:jar:1.0-SNAPSHOT
[WARNING] 'dependencies.dependency.version' for org.junit.jupiter:junit-jupiter-api:jar is either LATEST or RELEASE (both of them are being deprecated) @ line 25, column 22
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building thesis 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.2.1:java (default-cli) > validate @ thesis >>>
[INFO] 
[INFO] <<< exec-maven-plugin:1.2.1:java (default-cli) < validate @ thesis <<<
[INFO] 
[INFO] 
[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ thesis ---
BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL1
this.radius : this.radius = radius, 
this.angle : this.angle = angle, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartxCoordinateL3
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL4
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = this.radius * Math.cos(this.angle, ), 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL6
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL7
this.y : this.y = this.radius * Math.sin(this.angle, ), 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL9
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL10
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartangleL12
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL13
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startrotate90L15
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL16
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
rotatedPoint : rotatedPoint = new PolarPoint(this.radius, this.angle + Math.PI / 2, ), 
this.y : this.y = 0.0, 

BLOCK: StartmainL18

BLOCK: BasicL19
y2 : y2 = 0.0, 
radius : radius = 0.0, 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL21
y2 : y2 = 0.0, 
radius : radius = 0.0, 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), 
y : y = pointReader.nextDouble(), 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL23
y2 : y2 = 0.0, 
radius : radius = 0.0, 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL24
y2 : y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = pointReader.nextDouble(), 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL26
y2 : y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = angle + 360, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL27
y2 : y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = angle + 360, angle = pointReader.nextDouble(), 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL28
y2 : y2 = 0.0, 
radius : radius = 0.0, 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL25
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL22
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL29
y2 : y2 = pointReader.nextDouble(), 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), 
p2 : p2 = new CartesianPoint(x2, y2, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL31
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL32
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = pointReader.nextDouble(), 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL34
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL35
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = pointReader.nextDouble(), angle = angle + 360, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL36
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL33
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL30
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL37
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL39
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL38
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: Startdistance_funcL40

BLOCK: BasicL41
y2 : y2 = p2.yCoordinate(), 
y1 : y1 = p1.yCoordinate(), 
x2 : x2 = p2.xCoordinate(), 
x1 : x1 = p1.xCoordinate(), 

BLOCK: StartquadrantL43

BLOCK: BasicL44

BLOCK: trueL46

BLOCK: falseL48

BLOCK: trueL49

BLOCK: falseL51

BLOCK: trueL52

BLOCK: falseL54

BLOCK: trueL55

BLOCK: falseL57

BLOCK: joinL56

BLOCK: joinL53

BLOCK: joinL50

BLOCK: joinL47

BLOCK: StarttestPolarPointL58

BLOCK: BasicL59
p1_answer : p1_answer = p1.rotate90(), 
p1 : p1 = new PolarPoint(1, Math.PI / 2, ), 
p2 : p2 = new PolarPoint(3, 2 * Math.PI, ), 
p2_answer : p2_answer = p2.rotate90(), 

BLOCK: Startconstructor1L61
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL62
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = yCoord, 
this.x : this.x = xCoord, 

BLOCK: StartxCoordinateL64
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL65
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartyCoordinateL67
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL68
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL70
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL71
this.x : this.x = 0.0, 
this.radius : this.radius = Math.sqrt(this.x * this.x + this.y * this.y, ), 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL73
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL74
this.angle : this.angle = Math.atan2(this.y, this.x, ), 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: Startrotate90L76
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL77
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
rotatedPoint : rotatedPoint = new CartesianPoint(-this.y, this.x, ), 

BLOCK: StarttestCartesianPointL79

BLOCK: BasicL80
p1_answer : p1_answer = p1.rotate90(), 
p1 : p1 = new CartesianPoint(2, 4, ), 
p2_answer : p2_answer = p2.rotate90(), 
p2 : p2 = new CartesianPoint(3, 7, ), 

BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startconstructor1L0
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL1
this.radius : this.radius = radius, 
this.angle : this.angle = angle, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartxCoordinateL3
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartxCoordinateL3
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL4
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = this.radius * Math.cos(this.angle, ), 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL6
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL6
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL7
this.y : this.y = this.radius * Math.sin(this.angle, ), 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL9
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartradiusL9
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL10
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartangleL12
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartangleL12
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL13
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startrotate90L15
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: Startrotate90L15
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL16
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
rotatedPoint : rotatedPoint = new PolarPoint(this.radius, this.angle + Math.PI / 2, ), 
this.y : this.y = 0.0, 

BLOCK: StartmainL18

BLOCK: StartmainL18

BLOCK: BasicL19
y2 : y2 = 0.0, 
radius : radius = 0.0, 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL21
y2 : y2 = 0.0, 
radius : radius = 0.0, 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), 
y : y = pointReader.nextDouble(), 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL23
y2 : y2 = 0.0, 
radius : radius = 0.0, 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL24
y2 : y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = pointReader.nextDouble(), 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL26
y2 : y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = angle + 360, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL27
y2 : y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = angle + 360, angle = pointReader.nextDouble(), 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL28
y2 : y2 = 0.0, 
radius : radius = 0.0, 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = 0.0, 
y : y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = 0.0, 
p2 : p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, 
angle : angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL25
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL22
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL29
y2 : y2 = pointReader.nextDouble(), 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), 
p2 : p2 = new CartesianPoint(x2, y2, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL31
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL32
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = pointReader.nextDouble(), 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL34
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL35
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = pointReader.nextDouble(), angle = angle + 360, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL36
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL33
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = 0.0, distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL30
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: trueL37
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: falseL39
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: joinL38
y2 : y2 = pointReader.nextDouble(), y2 = 0.0, 
radius : radius = pointReader.nextDouble(), radius = 0.0, radius = pointReader.nextDouble(), 
choiceReader : choiceReader = new Scanner(System.in, ), 
x : x = pointReader.nextDouble(), x = 0.0, 
y : y = pointReader.nextDouble(), y = 0.0, 
choice : choice = choiceReader.nextInt(), choice = choiceReader.nextInt(), 
counter1 : counter1 = 0, 
p1 : p1 = new CartesianPoint(x, y, ), p1 = new PolarPoint(radius, Math.PI / 180 * angle, ), p1 = new CartesianPoint(0, 0, ), 
counter2 : counter2 = 0, 
x2 : x2 = pointReader.nextDouble(), x2 = 0.0, 
p2 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, ), p2 = new CartesianPoint(x2, y2, ), p2 = new CartesianPoint(0, 0, ), 
distance : distance = distance_func(p1, p2, ), 
angle : angle = angle + 360, angle = pointReader.nextDouble(), angle = pointReader.nextDouble(), angle = angle + 360, angle = 0.0, 
pointReader : pointReader = new Scanner(System.in, ), 

BLOCK: Startdistance_funcL40

BLOCK: Startdistance_funcL40

BLOCK: BasicL41
y2 : y2 = p2.yCoordinate(), 
y1 : y1 = p1.yCoordinate(), 
x2 : x2 = p2.xCoordinate(), 
x1 : x1 = p1.xCoordinate(), 

BLOCK: StartquadrantL43

BLOCK: StartquadrantL43

BLOCK: BasicL44

BLOCK: trueL46

BLOCK: falseL48

BLOCK: trueL49

BLOCK: falseL51

BLOCK: trueL52

BLOCK: falseL54

BLOCK: trueL55

BLOCK: falseL57

BLOCK: joinL56

BLOCK: joinL53

BLOCK: joinL50

BLOCK: joinL47

BLOCK: StarttestPolarPointL58

BLOCK: StarttestPolarPointL58

BLOCK: BasicL59
p1_answer : p1_answer = p1.rotate90(), 
p1 : p1 = new PolarPoint(1, Math.PI / 2, ), 
p2 : p2 = new PolarPoint(3, 2 * Math.PI, ), 
p2_answer : p2_answer = p2.rotate90(), 

BLOCK: Startconstructor1L61
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startconstructor1L61
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL62
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y : this.y = yCoord, 
this.x : this.x = xCoord, 

BLOCK: StartxCoordinateL64
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartxCoordinateL64
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL65
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartyCoordinateL67
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartyCoordinateL67
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL68
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL70
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL70
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL71
this.x : this.x = 0.0, 
this.radius : this.radius = Math.sqrt(this.x * this.x + this.y * this.y, ), 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL73
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartangleL73
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL74
this.angle : this.angle = Math.atan2(this.y, this.x, ), 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: Startrotate90L76
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: Startrotate90L76
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL77
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
rotatedPoint : rotatedPoint = new CartesianPoint(-this.y, this.x, ), 

BLOCK: StarttestCartesianPointL79

BLOCK: StarttestCartesianPointL79

BLOCK: BasicL80
p1_answer : p1_answer = p1.rotate90(), 
p1 : p1 = new CartesianPoint(2, 4, ), 
p2_answer : p2_answer = p2.rotate90(), 
p2 : p2 = new CartesianPoint(3, 7, ), 

Unfiltered: 0
Filtered: 0


[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9.268 s
[INFO] Finished at: 2019-05-01T17:12:12-07:00
[INFO] Final Memory: 34M/1424M
[INFO] ------------------------------------------------------------------------
