[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for thesis:thesis:jar:1.0-SNAPSHOT
[WARNING] 'dependencies.dependency.version' for org.junit.jupiter:junit-jupiter-api:jar is either LATEST or RELEASE (both of them are being deprecated) @ line 25, column 22
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building thesis 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.2.1:java (default-cli) > validate @ thesis >>>
[INFO] 
[INFO] <<< exec-maven-plugin:1.2.1:java (default-cli) < validate @ thesis <<<
[INFO] 
[INFO] 
[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ thesis ---
BLOCK: Startconstructor1L0
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL1
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = angle, 
this.radius : this.radius = radius, 

BLOCK: StartxCoordinateL3
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL4
this.x : this.x = this.radius * Math.cos(this.angle, ), 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartyCoordinateL6
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL7
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = this.radius * Math.sin(this.angle, ), 
this.radius : this.radius = 0.0, 

BLOCK: StartradiusL9
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL10
this.x : this.x = 0.0, 
this.radius : this.radius = this.radius, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL12
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL13
this.angle : this.angle = this.angle, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: Startrotate90L15
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL16
this.y : this.y = 0.0, 
this.angle : this.angle = this.angle + Math.PI / 2, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartmainL18

BLOCK: BasicL19
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), 
point2 : point2 = new CartesianPoint(0, 0, ), 
type : type = 0, 
y : y = 0.0, 
x : x = 0.0, 
in : in = new Scanner(System.in, ), 

BLOCK: ForInitL21
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), 
point2 : point2 = new CartesianPoint(0, 0, ), 
type : type = 0, 
count : count = 0, 
y : y = 0.0, 
x : x = 0.0, 
in : in = new Scanner(System.in, ), 

BLOCK: ForCondL22
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: LoopL23
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: BasicL24
quadrant : quadrant = quadrant(point1.angle(), point2.angle(), ), 
distan : distan = distance(point1, point2, ), 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL25
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL27
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL29
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL30
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(x, y, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL32
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(1, 1, ), 
point2 : point2 = new CartesianPoint(1, 1, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL31
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(x, y, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL28
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL33
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL34
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL36
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new PolarPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL38
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL39
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new PolarPoint(x, y, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL41
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(1, 1, ), 
point2 : point2 = new CartesianPoint(1, 1, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL40
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL37
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL42
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(1, 1, ), 
point2 : point2 = new CartesianPoint(1, 1, ), 
type : type = in.nextInt(), 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL35
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL26
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
count : count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
@temp1 : @temp1 = count, 
x : x = in.nextDouble(), x = in.nextDouble(), x = 0.0, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL43
quadrant : quadrant = quadrant(point1.angle(), point2.angle(), ), 
distan : distan = distance(point1, point2, ), 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL45
quadrant : quadrant = quadrant(point1.angle(), point2.angle(), ), 
distan : distan = distance(point1, point2, ), 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL44
quadrant : quadrant = quadrant(point1.angle(), point2.angle(), ), 
distan : distan = distance(point1, point2, ), 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: StartdistanceL46

BLOCK: BasicL47
y2 : y2 = point2.yCoordinate(), 
y : y = point1.yCoordinate(), 
x2 : x2 = point2.xCoordinate(), 
x : x = point1.xCoordinate(), 

BLOCK: StartquadrantL49

BLOCK: BasicL50

BLOCK: LoopL52
angle1 : angle1 = angle1 + Math.PI * 2, 

BLOCK: BasicL53
angle1 : angle1 = angle1 + Math.PI * 2, 

BLOCK: LoopL54
angle1 : angle1 = angle1 - Math.PI * 2, 

BLOCK: BasicL55
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 

BLOCK: LoopL56
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, 

BLOCK: BasicL57
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, 

BLOCK: LoopL58
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 - Math.PI * 2, 

BLOCK: BasicL59
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: trueL60
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: falseL62
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: trueL63
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: falseL65
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: trueL66
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: falseL68
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: trueL69
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: falseL71
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: joinL70
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: joinL67
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: joinL64
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: joinL61
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: StartPolarTestL72

BLOCK: BasicL73
UhnTiss : UhnTiss = new PolarPoint(1, Math.PI / 2, ), 
crazy : crazy = crazy.rotate90(), 

BLOCK: StartmainL75

BLOCK: BasicL76

BLOCK: Startconstructor1L78
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: BasicL79
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = y_coord, 
this.x : this.x = x_coord, 
this.x2 : this.x2 = 0.0, 

BLOCK: StartxCoordinateL81
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: BasicL82
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: StartyCoordinateL84
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL85
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartradiusL87
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: BasicL88
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = Math.sqrt(this.x * this.x + this.y * this.y, ), 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: StartangleL90
this.angle : this.angle = 0.0, 
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL91
this.angle : this.angle = Math.atan2(this.y, this.x, ), 
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: Startrotate90L93
this.radius : this.radius = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL94
this.radius : this.radius = 0.0, 
this.y2 : this.y2 = this.x, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 1 * this.y, 
this.angle : this.angle = 0.0, 

BLOCK: StartCartesianTestL96

BLOCK: BasicL97
crazy : crazy = crazy.rotate90(), 
UhnTiss : UhnTiss = new CartesianPoint(5, -9, ), 

BLOCK: StartmainL99

BLOCK: BasicL100

BLOCK: Startconstructor1L0
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: Startconstructor1L0
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL1
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = angle, 
this.radius : this.radius = radius, 

BLOCK: StartxCoordinateL3
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartxCoordinateL3
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL4
this.x : this.x = this.radius * Math.cos(this.angle, ), 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartyCoordinateL6
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartyCoordinateL6
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL7
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = this.radius * Math.sin(this.angle, ), 
this.radius : this.radius = 0.0, 

BLOCK: StartradiusL9
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartradiusL9
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL10
this.x : this.x = 0.0, 
this.radius : this.radius = this.radius, 
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: StartangleL12
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartangleL12
this.angle : this.angle = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL13
this.angle : this.angle = this.angle, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: Startrotate90L15
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 

BLOCK: Startrotate90L15
this.y : this.y = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL16
this.y : this.y = 0.0, 
this.angle : this.angle = this.angle + Math.PI / 2, 
this.radius : this.radius = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartmainL18

BLOCK: StartmainL18

BLOCK: BasicL19
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), 
point2 : point2 = new CartesianPoint(0, 0, ), 
type : type = 0, 
y : y = 0.0, 
x : x = 0.0, 
in : in = new Scanner(System.in, ), 

BLOCK: ForInitL21
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), 
point2 : point2 = new CartesianPoint(0, 0, ), 
type : type = 0, 
count : count = 0, 
y : y = 0.0, 
x : x = 0.0, 
in : in = new Scanner(System.in, ), 

BLOCK: ForCondL22
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: LoopL23
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: BasicL24
quadrant : quadrant = quadrant(point1.angle(), point2.angle(), ), 
distan : distan = distance(point1, point2, ), 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL25
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL27
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL29
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL30
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(x, y, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL32
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(1, 1, ), 
point2 : point2 = new CartesianPoint(1, 1, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL31
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(x, y, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL28
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL33
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL34
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL36
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new PolarPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL38
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL39
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new PolarPoint(x, y, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL41
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(1, 1, ), 
point2 : point2 = new CartesianPoint(1, 1, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL40
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL37
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL42
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(1, 1, ), 
point2 : point2 = new CartesianPoint(1, 1, ), 
type : type = in.nextInt(), 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL35
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
count : count = 0, count = count + 1, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL26
quadrant : quadrant = false, 
distan : distan = 0.0, 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), 
count : count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
@temp1 : @temp1 = count, 
x : x = in.nextDouble(), x = in.nextDouble(), x = 0.0, 
in : in = new Scanner(System.in, ), 

BLOCK: trueL43
quadrant : quadrant = quadrant(point1.angle(), point2.angle(), ), 
distan : distan = distance(point1, point2, ), 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: falseL45
quadrant : quadrant = quadrant(point1.angle(), point2.angle(), ), 
distan : distan = distance(point1, point2, ), 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: joinL44
quadrant : quadrant = quadrant(point1.angle(), point2.angle(), ), 
distan : distan = distance(point1, point2, ), 
point1 : point1 = new CartesianPoint(0, 0, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(1, 1, ), point1 = new PolarPoint(x, y, ), point1 = new CartesianPoint(1, 1, ), point1 = new CartesianPoint(x, y, ), 
point2 : point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new CartesianPoint(1, 1, ), point2 = new PolarPoint(x, y, ), point2 = new CartesianPoint(x, y, ), point2 = new CartesianPoint(0, 0, ), 
type : type = in.nextInt(), type = 0, 
count : count = 0, count = count + 1, 
y : y = in.nextDouble(), y = 0.0, y = y * Math.PI / 180, 
x : x = in.nextDouble(), x = 0.0, x = in.nextDouble(), 
@temp1 : @temp1 = count, 
in : in = new Scanner(System.in, ), 

BLOCK: StartdistanceL46

BLOCK: StartdistanceL46

BLOCK: BasicL47
y2 : y2 = point2.yCoordinate(), 
y : y = point1.yCoordinate(), 
x2 : x2 = point2.xCoordinate(), 
x : x = point1.xCoordinate(), 

BLOCK: StartquadrantL49

BLOCK: StartquadrantL49

BLOCK: BasicL50

BLOCK: LoopL52
angle1 : angle1 = angle1 + Math.PI * 2, 

BLOCK: BasicL53
angle1 : angle1 = angle1 + Math.PI * 2, 

BLOCK: LoopL54
angle1 : angle1 = angle1 - Math.PI * 2, 

BLOCK: BasicL55
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 

BLOCK: LoopL56
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, 

BLOCK: BasicL57
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, 

BLOCK: LoopL58
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 - Math.PI * 2, 

BLOCK: BasicL59
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: trueL60
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: falseL62
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: trueL63
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: falseL65
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: trueL66
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: falseL68
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: trueL69
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: falseL71
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: joinL70
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: joinL67
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: joinL64
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: joinL61
angle1 : angle1 = angle1 + Math.PI * 2, angle1 = angle1 - Math.PI * 2, 
angle2 : angle2 = angle2 + Math.PI * 2, angle2 = angle2 - Math.PI * 2, 

BLOCK: StartPolarTestL72

BLOCK: StartPolarTestL72

BLOCK: BasicL73
UhnTiss : UhnTiss = new PolarPoint(1, Math.PI / 2, ), 
crazy : crazy = crazy.rotate90(), 

BLOCK: StartmainL75

BLOCK: StartmainL75

BLOCK: BasicL76

BLOCK: Startconstructor1L78
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: Startconstructor1L78
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: BasicL79
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = y_coord, 
this.x : this.x = x_coord, 
this.x2 : this.x2 = 0.0, 

BLOCK: StartxCoordinateL81
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: StartxCoordinateL81
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: BasicL82
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.angle : this.angle = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: StartyCoordinateL84
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartyCoordinateL84
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: BasicL85
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 
this.angle : this.angle = 0.0, 
this.radius : this.radius = 0.0, 

BLOCK: StartradiusL87
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: StartradiusL87
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: BasicL88
this.angle : this.angle = 0.0, 
this.x : this.x = 0.0, 
this.radius : this.radius = Math.sqrt(this.x * this.x + this.y * this.y, ), 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x2 : this.x2 = 0.0, 

BLOCK: StartangleL90
this.angle : this.angle = 0.0, 
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: StartangleL90
this.angle : this.angle = 0.0, 
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: BasicL91
this.angle : this.angle = Math.atan2(this.y, this.x, ), 
this.y2 : this.y2 = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 
this.radius : this.radius = 0.0, 
this.y : this.y = 0.0, 

BLOCK: Startrotate90L93
this.radius : this.radius = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: Startrotate90L93
this.radius : this.radius = 0.0, 
this.y2 : this.y2 = 0.0, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 0.0, 
this.angle : this.angle = 0.0, 

BLOCK: BasicL94
this.radius : this.radius = 0.0, 
this.y2 : this.y2 = this.x, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.x2 : this.x2 = 1 * this.y, 
this.angle : this.angle = 0.0, 

BLOCK: StartCartesianTestL96

BLOCK: StartCartesianTestL96

BLOCK: BasicL97
crazy : crazy = crazy.rotate90(), 
UhnTiss : UhnTiss = new CartesianPoint(5, -9, ), 

BLOCK: StartmainL99

BLOCK: StartmainL99

BLOCK: BasicL100

Unfiltered: 4769
Filtered: 3


Duplicate found: 102_Code/102_hw1/dir13/PointRelation.java lines [9, 58] and 102_Code/102_hw1/dir13/PointRelation.java lines [10, 58]
102_Code/102_hw1/dir13/PointRelation.java ----------
9 :	x = 0.0
11 :	point1 = new CartesianPoint(0, 0, )
12 :	point2 = new CartesianPoint(0, 0, )
27 :	y = in.nextDouble()
29 :	point1 = new CartesianPoint(x, y, )
34 :	point1 = new CartesianPoint(1, 1, )
35 :	point2 = new CartesianPoint(1, 1, )
41 :	x = in.nextDouble()
46 :	point1 = new PolarPoint(x, y, )
48 :	point2 = new PolarPoint(x, y, )
52 :	point2 = new CartesianPoint(1, 1, )
57 :	point1 = new CartesianPoint(1, 1, )
58 :	point2 = new CartesianPoint(1, 1, )
102_Code/102_hw1/dir13/PointRelation.java ----------
10 :	y = 0.0
12 :	point2 = new CartesianPoint(0, 0, )
11 :	point1 = new CartesianPoint(0, 0, )
41 :	x = in.nextDouble()
48 :	point2 = new PolarPoint(x, y, )
35 :	point2 = new CartesianPoint(1, 1, )
34 :	point1 = new CartesianPoint(1, 1, )
27 :	y = in.nextDouble()
31 :	point2 = new CartesianPoint(x, y, )
29 :	point1 = new CartesianPoint(x, y, )
51 :	point1 = new CartesianPoint(1, 1, )
58 :	point2 = new CartesianPoint(1, 1, )
57 :	point1 = new CartesianPoint(1, 1, )
===========================



Duplicate found: 102_Code/102_hw1/dir13/PointRelation.java lines [9, 57] and 102_Code/102_hw1/dir13/PointRelation.java lines [9, 58]
102_Code/102_hw1/dir13/PointRelation.java ----------
9 :	x = 0.0
10 :	y = 0.0
11 :	point1 = new CartesianPoint(0, 0, )
13 :	distan = 0.0
27 :	y = in.nextDouble()
29 :	point1 = new CartesianPoint(x, y, )
31 :	point2 = new CartesianPoint(x, y, )
35 :	point2 = new CartesianPoint(1, 1, )
46 :	point1 = new PolarPoint(x, y, )
48 :	point2 = new PolarPoint(x, y, )
52 :	point2 = new CartesianPoint(1, 1, )
57 :	point1 = new CartesianPoint(1, 1, )
102_Code/102_hw1/dir13/PointRelation.java ----------
13 :	distan = 0.0
9 :	x = 0.0
12 :	point2 = new CartesianPoint(0, 0, )
10 :	y = 0.0
41 :	x = in.nextDouble()
48 :	point2 = new PolarPoint(x, y, )
46 :	point1 = new PolarPoint(x, y, )
57 :	point1 = new CartesianPoint(1, 1, )
31 :	point2 = new CartesianPoint(x, y, )
29 :	point1 = new CartesianPoint(x, y, )
34 :	point1 = new CartesianPoint(1, 1, )
58 :	point2 = new CartesianPoint(1, 1, )
===========================



Duplicate found: 102_Code/102_hw1/dir13/PointRelation.java lines [9, 58] and 102_Code/102_hw1/dir13/PointRelation.java lines [9, 58]
102_Code/102_hw1/dir13/PointRelation.java ----------
9 :	x = 0.0
10 :	y = 0.0
11 :	point1 = new CartesianPoint(0, 0, )
13 :	distan = 0.0
27 :	y = in.nextDouble()
29 :	point1 = new CartesianPoint(x, y, )
31 :	point2 = new CartesianPoint(x, y, )
35 :	point2 = new CartesianPoint(1, 1, )
46 :	point1 = new PolarPoint(x, y, )
48 :	point2 = new PolarPoint(x, y, )
57 :	point1 = new CartesianPoint(1, 1, )
58 :	point2 = new CartesianPoint(1, 1, )
102_Code/102_hw1/dir13/PointRelation.java ----------
13 :	distan = 0.0
9 :	x = 0.0
12 :	point2 = new CartesianPoint(0, 0, )
10 :	y = 0.0
41 :	x = in.nextDouble()
48 :	point2 = new PolarPoint(x, y, )
46 :	point1 = new PolarPoint(x, y, )
57 :	point1 = new CartesianPoint(1, 1, )
31 :	point2 = new CartesianPoint(x, y, )
29 :	point1 = new CartesianPoint(x, y, )
58 :	point2 = new CartesianPoint(1, 1, )
34 :	point1 = new CartesianPoint(1, 1, )
===========================



[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 7.926 s
[INFO] Finished at: 2019-05-06T19:47:27-07:00
[INFO] Final Memory: 29M/1276M
[INFO] ------------------------------------------------------------------------
