[INFO] Scanning for projects...
[WARNING] 
[WARNING] Some problems were encountered while building the effective model for thesis:thesis:jar:1.0-SNAPSHOT
[WARNING] 'dependencies.dependency.version' for org.junit.jupiter:junit-jupiter-api:jar is either LATEST or RELEASE (both of them are being deprecated) @ line 25, column 22
[WARNING] 
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING] 
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING] 
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building thesis 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> exec-maven-plugin:1.2.1:java (default-cli) > validate @ thesis >>>
[INFO] 
[INFO] <<< exec-maven-plugin:1.2.1:java (default-cli) < validate @ thesis <<<
[INFO] 
[INFO] 
[INFO] --- exec-maven-plugin:1.2.1:java (default-cli) @ thesis ---
BLOCK: Startconstructor1L0
this.theta : this.theta = 0.0, 
this.p : this.p = null, 
this.r : this.r = 0.0, 

BLOCK: BasicL1
this.theta : this.theta = angle, 
this.p : this.p = null, 
this.r : this.r = radius, 

BLOCK: StartxCoordinateL3
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL4
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: StartyCoordinateL6
this.theta : this.theta = 0.0, 
this.r : this.r = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL7
this.theta : this.theta = 0.0, 
this.r : this.r = 0.0, 
this.p : this.p = null, 

BLOCK: StartradiusL9
this.theta : this.theta = 0.0, 
this.p : this.p = null, 
this.r : this.r = 0.0, 

BLOCK: BasicL10
this.theta : this.theta = 0.0, 
this.p : this.p = null, 
this.r : this.r = 0.0, 

BLOCK: StartangleL12
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL13
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: Startrotate90L15
this.r : this.r = 0.0, 
this.p : this.p = null, 
this.theta : this.theta = 0.0, 

BLOCK: BasicL16
this.r : this.r = 0.0, 
this.p : this.p = null, 
this.theta : this.theta = 0.0, 

BLOCK: Startinput_outputL18

BLOCK: BasicL19
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL21
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: falseL23
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL24
angle_1 : angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL26
angle_1 : angle_1 = angle_1 + 360, 
radius_1 : radius_1 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL27
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: falseL28
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL25
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL22
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL29
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
x2 : x2 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
y2 : y2 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(x2, y2, ), 
input : input = new Scanner(System.in, ), 

BLOCK: falseL31
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL32
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = input.nextDouble(), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
radius_2 : radius_2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL34
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = angle_2 + 360, 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
radius_2 : radius_2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL35
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new PolarPoint(radius_2, theta_2, ), 
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = angle_2 + 360, angle_2 = input.nextDouble(), 
theta_2 : theta_2 = Math.toRadians(angle_2, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
x1 : x1 = input.nextDouble(), 
radius_2 : radius_2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 

BLOCK: falseL36
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL33
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new PolarPoint(radius_2, theta_2, ), p2 = new CartesianPoint(0, 0, ), 
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = angle_2 + 360, angle_2 = input.nextDouble(), 
theta_2 : theta_2 = Math.toRadians(angle_2, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
x1 : x1 = input.nextDouble(), 
radius_2 : radius_2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL30
x2 : x2 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new PolarPoint(radius_2, theta_2, ), p2 = new CartesianPoint(0, 0, ), p2 = new CartesianPoint(x2, y2, ), 
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = angle_2 + 360, angle_2 = input.nextDouble(), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
theta_2 : theta_2 = Math.toRadians(angle_2, ), 
choice_2 : choice_2 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
x1 : x1 = input.nextDouble(), 
y2 : y2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 
radius_2 : radius_2 = input.nextDouble(), 

BLOCK: Startcompute_distanceL37

BLOCK: BasicL38

BLOCK: StartquadrantL40

BLOCK: BasicL41
flag : flag = false, 

BLOCK: trueL43
flag : flag = true, 

BLOCK: falseL45
flag : flag = false, 

BLOCK: joinL44
flag : flag = false, flag = true, 

BLOCK: Startdistance_quadrantL46

BLOCK: BasicL47

BLOCK: trueL49

BLOCK: falseL51

BLOCK: joinL50

BLOCK: StartmainL52

BLOCK: BasicL53

BLOCK: StartmainL55

BLOCK: BasicL56
p2 : p2 = new PolarPoint(2.0, 45.0, ), 
p1 : p1 = new PolarPoint(1.0, 90.0, ), 
p4 : p4 = p2.rotate90(), 
p3 : p3 = p1.rotate90(), 

BLOCK: Startconstructor1L58
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL59
this.y : this.y = y_coord, 
this.x : this.x = x_coord, 
this.p : this.p = null, 

BLOCK: StartxCoordinateL61
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL62
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartyCoordinateL64
this.x : this.x = 0.0, 
this.p : this.p = null, 
this.y : this.y = 0.0, 

BLOCK: BasicL65
this.x : this.x = 0.0, 
this.p : this.p = null, 
this.y : this.y = 0.0, 

BLOCK: StartradiusL67
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL68
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartangleL70
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL71
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: Startrotate90L73
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL74
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: StartmainL76

BLOCK: BasicL77
p5 : p5 = new CartesianPoint(1, 1, ), 
p2 : p2 = new CartesianPoint(0, 1, ), 
p1 : p1 = new CartesianPoint(1, 0, ), 
p4 : p4 = p2.rotate90(), 
p3 : p3 = p1.rotate90(), 

BLOCK: Startconstructor1L0
this.theta : this.theta = 0.0, 
this.p : this.p = null, 
this.r : this.r = 0.0, 

BLOCK: Startconstructor1L0
this.theta : this.theta = 0.0, 
this.p : this.p = null, 
this.r : this.r = 0.0, 

BLOCK: BasicL1
this.theta : this.theta = angle, 
this.p : this.p = null, 
this.r : this.r = radius, 

BLOCK: StartxCoordinateL3
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: StartxCoordinateL3
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL4
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: StartyCoordinateL6
this.theta : this.theta = 0.0, 
this.r : this.r = 0.0, 
this.p : this.p = null, 

BLOCK: StartyCoordinateL6
this.theta : this.theta = 0.0, 
this.r : this.r = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL7
this.theta : this.theta = 0.0, 
this.r : this.r = 0.0, 
this.p : this.p = null, 

BLOCK: StartradiusL9
this.theta : this.theta = 0.0, 
this.p : this.p = null, 
this.r : this.r = 0.0, 

BLOCK: StartradiusL9
this.theta : this.theta = 0.0, 
this.p : this.p = null, 
this.r : this.r = 0.0, 

BLOCK: BasicL10
this.theta : this.theta = 0.0, 
this.p : this.p = null, 
this.r : this.r = 0.0, 

BLOCK: StartangleL12
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: StartangleL12
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL13
this.r : this.r = 0.0, 
this.theta : this.theta = 0.0, 
this.p : this.p = null, 

BLOCK: Startrotate90L15
this.r : this.r = 0.0, 
this.p : this.p = null, 
this.theta : this.theta = 0.0, 

BLOCK: Startrotate90L15
this.r : this.r = 0.0, 
this.p : this.p = null, 
this.theta : this.theta = 0.0, 

BLOCK: BasicL16
this.r : this.r = 0.0, 
this.p : this.p = null, 
this.theta : this.theta = 0.0, 

BLOCK: Startinput_outputL18

BLOCK: Startinput_outputL18

BLOCK: BasicL19
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL21
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: falseL23
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL24
angle_1 : angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL26
angle_1 : angle_1 = angle_1 + 360, 
radius_1 : radius_1 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL27
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: falseL28
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL25
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL22
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL29
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
x2 : x2 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
y2 : y2 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(x2, y2, ), 
input : input = new Scanner(System.in, ), 

BLOCK: falseL31
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL32
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = input.nextDouble(), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
radius_2 : radius_2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 

BLOCK: trueL34
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = angle_2 + 360, 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
radius_2 : radius_2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL35
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new PolarPoint(radius_2, theta_2, ), 
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = angle_2 + 360, angle_2 = input.nextDouble(), 
theta_2 : theta_2 = Math.toRadians(angle_2, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
x1 : x1 = input.nextDouble(), 
radius_2 : radius_2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 

BLOCK: falseL36
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
choice_1 : choice_1 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
x1 : x1 = input.nextDouble(), 
p2 : p2 = new CartesianPoint(0, 0, ), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL33
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new PolarPoint(radius_2, theta_2, ), p2 = new CartesianPoint(0, 0, ), 
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = angle_2 + 360, angle_2 = input.nextDouble(), 
theta_2 : theta_2 = Math.toRadians(angle_2, ), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
choice_2 : choice_2 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
x1 : x1 = input.nextDouble(), 
radius_2 : radius_2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 

BLOCK: joinL30
x2 : x2 = input.nextDouble(), 
choice_1 : choice_1 = input.nextInt(), 
p1 : p1 = new CartesianPoint(x1, y1, ), p1 = new CartesianPoint(0, 0, ), p1 = new PolarPoint(radius_1, theta_1, ), 
p2 : p2 = new PolarPoint(radius_2, theta_2, ), p2 = new CartesianPoint(0, 0, ), p2 = new CartesianPoint(x2, y2, ), 
theta_1 : theta_1 = Math.toRadians(angle_1, ), 
angle_2 : angle_2 = angle_2 + 360, angle_2 = input.nextDouble(), 
angle_1 : angle_1 = angle_1 + 360, angle_1 = input.nextDouble(), 
radius_1 : radius_1 = input.nextDouble(), 
theta_2 : theta_2 = Math.toRadians(angle_2, ), 
choice_2 : choice_2 = input.nextInt(), 
y1 : y1 = input.nextDouble(), 
x1 : x1 = input.nextDouble(), 
y2 : y2 = input.nextDouble(), 
input : input = new Scanner(System.in, ), 
radius_2 : radius_2 = input.nextDouble(), 

BLOCK: Startcompute_distanceL37

BLOCK: Startcompute_distanceL37

BLOCK: BasicL38

BLOCK: StartquadrantL40

BLOCK: StartquadrantL40

BLOCK: BasicL41
flag : flag = false, 

BLOCK: trueL43
flag : flag = true, 

BLOCK: falseL45
flag : flag = false, 

BLOCK: joinL44
flag : flag = false, flag = true, 

BLOCK: Startdistance_quadrantL46

BLOCK: Startdistance_quadrantL46

BLOCK: BasicL47

BLOCK: trueL49

BLOCK: falseL51

BLOCK: joinL50

BLOCK: StartmainL52

BLOCK: StartmainL52

BLOCK: BasicL53

BLOCK: StartmainL55

BLOCK: StartmainL55

BLOCK: BasicL56
p2 : p2 = new PolarPoint(2.0, 45.0, ), 
p1 : p1 = new PolarPoint(1.0, 90.0, ), 
p4 : p4 = p2.rotate90(), 
p3 : p3 = p1.rotate90(), 

BLOCK: Startconstructor1L58
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.p : this.p = null, 

BLOCK: Startconstructor1L58
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL59
this.y : this.y = y_coord, 
this.x : this.x = x_coord, 
this.p : this.p = null, 

BLOCK: StartxCoordinateL61
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartxCoordinateL61
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL62
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartyCoordinateL64
this.x : this.x = 0.0, 
this.p : this.p = null, 
this.y : this.y = 0.0, 

BLOCK: StartyCoordinateL64
this.x : this.x = 0.0, 
this.p : this.p = null, 
this.y : this.y = 0.0, 

BLOCK: BasicL65
this.x : this.x = 0.0, 
this.p : this.p = null, 
this.y : this.y = 0.0, 

BLOCK: StartradiusL67
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartradiusL67
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: BasicL68
this.p : this.p = null, 
this.y : this.y = 0.0, 
this.x : this.x = 0.0, 

BLOCK: StartangleL70
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: StartangleL70
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL71
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: Startrotate90L73
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: Startrotate90L73
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: BasicL74
this.x : this.x = 0.0, 
this.y : this.y = 0.0, 
this.p : this.p = null, 

BLOCK: StartmainL76

BLOCK: StartmainL76

BLOCK: BasicL77
p5 : p5 = new CartesianPoint(1, 1, ), 
p2 : p2 = new CartesianPoint(0, 1, ), 
p1 : p1 = new CartesianPoint(1, 0, ), 
p4 : p4 = p2.rotate90(), 
p3 : p3 = p1.rotate90(), 

Unfiltered: 0
Filtered: 0


[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5.127 s
[INFO] Finished at: 2019-05-01T17:08:30-07:00
[INFO] Final Memory: 34M/1433M
[INFO] ------------------------------------------------------------------------
