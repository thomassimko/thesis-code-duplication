digraph G {
"11 : a = new DoubleConstantExpression(1.0, )"
"11 : a = new DoubleConstantExpression(1.0, )" -> "20 : b = new NegationExpression(a, )"
"11 : a = new DoubleConstantExpression(1.0, )" -> "29 : e = new AddExpression(a, d, )"
"11 : a = new DoubleConstantExpression(1.0, )" -> "39 : g = new MultiplyExpression(d, a, )"
"11 : a = new DoubleConstantExpression(1.0, )" -> "34 : f = new SubtractExpression(d, a, )"
"11 : a = new DoubleConstantExpression(1.0, )" -> "64 : z = new AddExpression(a, b, )"
"11 : a = new DoubleConstantExpression(1.0, )" -> "44 : h = new DivideExpression(d, a, )"
"11 : a = new DoubleConstantExpression(1.0, )" -> "25 : c = new AddExpression(a, b, )"
"12 : Check.check(a.evaluate(null, ), 1.0, )"
"13 : System.out.println(a.toString(), )"
"15 : d = new DoubleConstantExpression(2.0, )"
"15 : d = new DoubleConstantExpression(2.0, )" -> "29 : e = new AddExpression(a, d, )"
"15 : d = new DoubleConstantExpression(2.0, )" -> "39 : g = new MultiplyExpression(d, a, )"
"15 : d = new DoubleConstantExpression(2.0, )" -> "34 : f = new SubtractExpression(d, a, )"
"15 : d = new DoubleConstantExpression(2.0, )" -> "44 : h = new DivideExpression(d, a, )"
"16 : Check.check(d.evaluate(null, ), 2.0, )"
"17 : System.out.println(d.toString(), )"
"20 : b = new NegationExpression(a, )"
"20 : b = new NegationExpression(a, )" -> "64 : z = new AddExpression(a, b, )"
"20 : b = new NegationExpression(a, )" -> "25 : c = new AddExpression(a, b, )"
"21 : Check.check(b.evaluate(null, ), 1.0, )"
"22 : System.out.println(b.toString(), )"
"25 : c = new AddExpression(a, b, )"
"26 : Check.check(c.evaluate(null, ), 0.0, )"
"27 : System.out.println(c.toString(), )"
"29 : e = new AddExpression(a, d, )"
"30 : System.out.println(e.toString(), )"
"31 : Check.check(e.evaluate(null, ), 3.0, )"
"34 : f = new SubtractExpression(d, a, )"
"35 : Check.check(f.evaluate(null, ), 1.0, )"
"36 : System.out.println(f.toString(), )"
"39 : g = new MultiplyExpression(d, a, )"
"40 : Check.check(g.evaluate(null, ), 2.0, )"
"41 : System.out.println(g.toString(), )"
"44 : h = new DivideExpression(d, a, )"
"45 : Check.check(h.evaluate(null, ), 2.0, )"
"46 : System.out.println(h.toString(), )"
"49 : vb = new VariableBindings()"
"49 : vb = new VariableBindings()" -> "72 : Check.check(p.evaluate(vb, ), 2.0, )"
"49 : vb = new VariableBindings()" -> "66 : Check.check(assign.evaluate(vb, ), 0.0, )"
"50 : vb.addBinding(\"a\", 2.0, )"
"52 : bindvalue = vb.lookupBinding(\"a\", )"
"52 : bindvalue = vb.lookupBinding(\"a\", )" -> "53 : System.out.println(bindvalue, )"
"53 : System.out.println(bindvalue, )"
"55 : vb.addBinding(\"b\", 5.0, )"
"56 : bindvalue2 = vb.lookupBinding(\"b\", )"
"56 : bindvalue2 = vb.lookupBinding(\"b\", )" -> "57 : System.out.println(bindvalue2, )"
"57 : System.out.println(bindvalue2, )"
"59 : vb.addBinding(\"c\", 6.0, )"
"60 : bindvalue3 = vb.lookupBinding(\"c\", )"
"60 : bindvalue3 = vb.lookupBinding(\"c\", )" -> "61 : System.out.println(bindvalue3, )"
"61 : System.out.println(bindvalue3, )"
"64 : z = new AddExpression(a, b, )"
"64 : z = new AddExpression(a, b, )" -> "65 : assign = new Assignment(\"a\", z, )"
"65 : assign = new Assignment(\"a\", z, )"
"66 : Check.check(assign.evaluate(vb, ), 0.0, )"
"67 : System.out.println(assign.toString(), )"
"70 : vb.addBinding(\"j\", 2.0, )"
"71 : p = new IdentifierExpression(\"j\", )"
"72 : Check.check(p.evaluate(vb, ), 2.0, )"
"73 : System.out.println(p.toString(), )"
}