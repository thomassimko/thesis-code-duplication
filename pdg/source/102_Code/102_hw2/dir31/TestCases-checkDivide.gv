digraph G {
"50 : a = new DoubleConstantExpression(2, )"
"50 : a = new DoubleConstantExpression(2, )" -> "53 : d = new AddExpression(a, c, )"
"50 : a = new DoubleConstantExpression(2, )" -> "56 : e = new DivideExpression(c, a, )"
"50 : a = new DoubleConstantExpression(2, )" -> "58 : e3 = new DivideExpression(d, a, )"
"50 : a = new DoubleConstantExpression(2, )" -> "54 : f = new SubtractExpression(c, a, )"
"51 : b = new DoubleConstantExpression(3, )"
"51 : b = new DoubleConstantExpression(3, )" -> "57 : e2 = new DivideExpression(c, b, )"
"52 : c = new DoubleConstantExpression(6, )"
"52 : c = new DoubleConstantExpression(6, )" -> "53 : d = new AddExpression(a, c, )"
"52 : c = new DoubleConstantExpression(6, )" -> "56 : e = new DivideExpression(c, a, )"
"52 : c = new DoubleConstantExpression(6, )" -> "54 : f = new SubtractExpression(c, a, )"
"52 : c = new DoubleConstantExpression(6, )" -> "57 : e2 = new DivideExpression(c, b, )"
"53 : d = new AddExpression(a, c, )"
"53 : d = new AddExpression(a, c, )" -> "58 : e3 = new DivideExpression(d, a, )"
"53 : d = new AddExpression(a, c, )" -> "59 : e4 = new DivideExpression(d, f, )"
"54 : f = new SubtractExpression(c, a, )"
"54 : f = new SubtractExpression(c, a, )" -> "59 : e4 = new DivideExpression(d, f, )"
"56 : e = new DivideExpression(c, a, )"
"57 : e2 = new DivideExpression(c, b, )"
"58 : e3 = new DivideExpression(d, a, )"
"59 : e4 = new DivideExpression(d, f, )"
"61 : Check.check(e.evaluate(bindings, ), 3, )"
"62 : Check.check(e2.evaluate(bindings, ), 2, )"
"63 : Check.check(e3.evaluate(bindings, ), 4, )"
"64 : Check.check(e4.evaluate(bindings, ), 2, )"
}