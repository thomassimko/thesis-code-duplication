digraph G {
"6 : one = null"
"6 : one = null" -> "7 : one = new DoubleConstantExpression(4, )" [style=dashed]
"6 : two = null"
"6 : two = null" -> "8 : two = new DoubleConstantExpression(5, )" [style=dashed]
"7 : one = new DoubleConstantExpression(4, )"
"7 : one = new DoubleConstantExpression(4, )" -> "17 : e = new DivideExpression(one, two, )"
"7 : one = new DoubleConstantExpression(4, )" -> "14 : b = new AddExpression(one, two, )"
"7 : one = new DoubleConstantExpression(4, )" -> "15 : c = new SubtractExpression(one, two, )"
"7 : one = new DoubleConstantExpression(4, )" -> "16 : d = new MultiplyExpression(one, two, )"
"7 : one = new DoubleConstantExpression(4, )" -> "13 : a = new NegationExpression(one, )"
"8 : two = new DoubleConstantExpression(5, )"
"8 : two = new DoubleConstantExpression(5, )" -> "17 : e = new DivideExpression(one, two, )"
"8 : two = new DoubleConstantExpression(5, )" -> "14 : b = new AddExpression(one, two, )"
"8 : two = new DoubleConstantExpression(5, )" -> "15 : c = new SubtractExpression(one, two, )"
"8 : two = new DoubleConstantExpression(5, )" -> "16 : d = new MultiplyExpression(one, two, )"
"9 : bound = new VariableBindings()"
"9 : bound = new VariableBindings()" -> "25 : System.out.println(\"\" + f + \" = \" + f.evaluate(bound, ), )"
"9 : bound = new VariableBindings()" -> "20 : System.out.println(\"\" + a.evaluate(bound, ), )"
"9 : bound = new VariableBindings()" -> "23 : System.out.println(\"\" + d + \" = \" + d.evaluate(bound, ), )"
"9 : bound = new VariableBindings()" -> "21 : System.out.println(\"\" + b + \" = \" + b.evaluate(bound, ), )"
"9 : bound = new VariableBindings()" -> "24 : System.out.println(\"\" + e + \" = \" + e.evaluate(bound, ), )"
"9 : bound = new VariableBindings()" -> "11 : setter.evaluate(bound, )"
"9 : bound = new VariableBindings()" -> "22 : System.out.println(\"\" + c + \" = \" + c.evaluate(bound, ), )"
"10 : setter = new Assignment(\"A\", new DoubleConstantExpression(2, ), )"
"10 : setter = new Assignment(\"A\", new DoubleConstantExpression(2, ), )" -> "12 : System.out.println(\"\" + setter, )"
"11 : setter.evaluate(bound, )"
"12 : System.out.println(\"\" + setter, )"
"13 : a = new NegationExpression(one, )"
"14 : b = new AddExpression(one, two, )"
"14 : b = new AddExpression(one, two, )" -> "21 : System.out.println(\"\" + b + \" = \" + b.evaluate(bound, ), )"
"15 : c = new SubtractExpression(one, two, )"
"15 : c = new SubtractExpression(one, two, )" -> "22 : System.out.println(\"\" + c + \" = \" + c.evaluate(bound, ), )"
"16 : d = new MultiplyExpression(one, two, )"
"16 : d = new MultiplyExpression(one, two, )" -> "23 : System.out.println(\"\" + d + \" = \" + d.evaluate(bound, ), )"
"17 : e = new DivideExpression(one, two, )"
"17 : e = new DivideExpression(one, two, )" -> "24 : System.out.println(\"\" + e + \" = \" + e.evaluate(bound, ), )"
"18 : f = new IdentifierExpression(\"A\", )"
"18 : f = new IdentifierExpression(\"A\", )" -> "25 : System.out.println(\"\" + f + \" = \" + f.evaluate(bound, ), )"
"19 : g = new IdentifierExpression(\"B\", )"
"20 : System.out.println(\"\" + a.evaluate(bound, ), )"
"21 : System.out.println(\"\" + b + \" = \" + b.evaluate(bound, ), )"
"22 : System.out.println(\"\" + c + \" = \" + c.evaluate(bound, ), )"
"23 : System.out.println(\"\" + d + \" = \" + d.evaluate(bound, ), )"
"24 : System.out.println(\"\" + e + \" = \" + e.evaluate(bound, ), )"
"25 : System.out.println(\"\" + f + \" = \" + f.evaluate(bound, ), )"
"27 : System.out.println(\"\" + g + \" = \" + g.evaluate(bound, ), )"
"29 : System.err.println(exp.getMessage(), )"
}