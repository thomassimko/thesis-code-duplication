digraph G {
"3 : b = new VariableBindings()"
"3 : b = new VariableBindings()" -> "55 : Check.check(m1.evaluate(b, ), 1.0, )"
"3 : b = new VariableBindings()" -> "40 : Check.check(n2.evaluate(b, ), 1.0, )"
"3 : b = new VariableBindings()" -> "68 : Check.check(y_id.evaluate(b, ), 0, )"
"3 : b = new VariableBindings()" -> "46 : Check.check(a4.evaluate(b, ), 5.0, )"
"3 : b = new VariableBindings()" -> "59 : Check.check(d1.evaluate(b, ), 1, )"
"3 : b = new VariableBindings()" -> "45 : Check.check(a3.evaluate(b, ), 3.0, )"
"3 : b = new VariableBindings()" -> "64 : Check.check(y.evaluate(b, ), 0, )"
"3 : b = new VariableBindings()" -> "44 : Check.check(a2.evaluate(b, ), 2.0, )"
"3 : b = new VariableBindings()" -> "63 : Check.check(x.evaluate(b, ), 1, )"
"3 : b = new VariableBindings()" -> "36 : Check.check(c2.evaluate(b, ), 1.0, )"
"3 : b = new VariableBindings()" -> "43 : Check.check(a1.evaluate(b, ), 0.0, )"
"3 : b = new VariableBindings()" -> "49 : Check.check(s1.evaluate(b, ), 3.0, )"
"3 : b = new VariableBindings()" -> "51 : Check.check(s3.evaluate(b, ), 1.0, )"
"3 : b = new VariableBindings()" -> "56 : Check.check(m2.evaluate(b, ), 9, )"
"3 : b = new VariableBindings()" -> "67 : Check.check(x_id.evaluate(b, ), 1, )"
"3 : b = new VariableBindings()" -> "39 : Check.check(n1.evaluate(b, ), 1.0, )"
"3 : b = new VariableBindings()" -> "35 : Check.check(c1.evaluate(b, ), 1.0, )"
"3 : b = new VariableBindings()" -> "50 : Check.check(s2.evaluate(b, ), 3.0, )"
"3 : b = new VariableBindings()" -> "60 : Check.check(d2.evaluate(b, ), 0, )"
"3 : b = new VariableBindings()" -> "52 : Check.check(s4.evaluate(b, ), 0, )"
"5 : c1 = new DoubleConstantExpression(1.0, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "18 : s1 = new SubtractExpression(c4, c1, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "13 : a1 = new AddExpression(c1, c2, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "19 : s2 = new SubtractExpression(c1, c4, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "26 : d1 = new DivideExpression(c1, c2, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "15 : a3 = new AddExpression(a2, c1, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "14 : a2 = new AddExpression(c1, c1, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "10 : n1 = new NegationExpression(c1, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "23 : m1 = new MultiplyExpression(c1, c2, )"
"5 : c1 = new DoubleConstantExpression(1.0, )" -> "29 : x = new Assignment(\"x\", c1, )"
"6 : c2 = new DoubleConstantExpression(-1.0, )"
"6 : c2 = new DoubleConstantExpression(-1.0, )" -> "11 : n2 = new NegationExpression(c2, )"
"6 : c2 = new DoubleConstantExpression(-1.0, )" -> "13 : a1 = new AddExpression(c1, c2, )"
"6 : c2 = new DoubleConstantExpression(-1.0, )" -> "26 : d1 = new DivideExpression(c1, c2, )"
"6 : c2 = new DoubleConstantExpression(-1.0, )" -> "23 : m1 = new MultiplyExpression(c1, c2, )"
"7 : c3 = new DoubleConstantExpression(0.0, )"
"7 : c3 = new DoubleConstantExpression(0.0, )" -> "21 : s4 = new SubtractExpression(a1, c3, )"
"8 : c4 = new DoubleConstantExpression(4.0, )"
"8 : c4 = new DoubleConstantExpression(4.0, )" -> "18 : s1 = new SubtractExpression(c4, c1, )"
"8 : c4 = new DoubleConstantExpression(4.0, )" -> "20 : s3 = new SubtractExpression(s1, c4, )"
"8 : c4 = new DoubleConstantExpression(4.0, )" -> "19 : s2 = new SubtractExpression(c1, c4, )"
"10 : n1 = new NegationExpression(c1, )"
"11 : n2 = new NegationExpression(c2, )"
"13 : a1 = new AddExpression(c1, c2, )"
"13 : a1 = new AddExpression(c1, c2, )" -> "30 : y = new Assignment(\"y\", a1, )"
"13 : a1 = new AddExpression(c1, c2, )" -> "21 : s4 = new SubtractExpression(a1, c3, )"
"14 : a2 = new AddExpression(c1, c1, )"
"14 : a2 = new AddExpression(c1, c1, )" -> "15 : a3 = new AddExpression(a2, c1, )"
"14 : a2 = new AddExpression(c1, c1, )" -> "16 : a4 = new AddExpression(a2, a3, )"
"15 : a3 = new AddExpression(a2, c1, )"
"15 : a3 = new AddExpression(a2, c1, )" -> "16 : a4 = new AddExpression(a2, a3, )"
"16 : a4 = new AddExpression(a2, a3, )"
"18 : s1 = new SubtractExpression(c4, c1, )"
"18 : s1 = new SubtractExpression(c4, c1, )" -> "20 : s3 = new SubtractExpression(s1, c4, )"
"18 : s1 = new SubtractExpression(c4, c1, )" -> "24 : m2 = new MultiplyExpression(s1, s2, )"
"19 : s2 = new SubtractExpression(c1, c4, )"
"19 : s2 = new SubtractExpression(c1, c4, )" -> "27 : d2 = new DivideExpression(s4, s2, )"
"19 : s2 = new SubtractExpression(c1, c4, )" -> "24 : m2 = new MultiplyExpression(s1, s2, )"
"20 : s3 = new SubtractExpression(s1, c4, )"
"21 : s4 = new SubtractExpression(a1, c3, )"
"21 : s4 = new SubtractExpression(a1, c3, )" -> "27 : d2 = new DivideExpression(s4, s2, )"
"23 : m1 = new MultiplyExpression(c1, c2, )"
"24 : m2 = new MultiplyExpression(s1, s2, )"
"26 : d1 = new DivideExpression(c1, c2, )"
"27 : d2 = new DivideExpression(s4, s2, )"
"29 : x = new Assignment(\"x\", c1, )"
"30 : y = new Assignment(\"y\", a1, )"
"32 : x_id = new IdentifierExpression(\"x\", )"
"33 : y_id = new IdentifierExpression(\"y\", )"
"35 : Check.check(c1.evaluate(b, ), 1.0, )"
"36 : Check.check(c2.evaluate(b, ), 1.0, )"
"37 : Check.check(c1.toString(), \"1.0\", )"
"39 : Check.check(n1.evaluate(b, ), 1.0, )"
"40 : Check.check(n2.evaluate(b, ), 1.0, )"
"41 : Check.check(n1.toString(), \"-1.0\", )"
"43 : Check.check(a1.evaluate(b, ), 0.0, )"
"44 : Check.check(a2.evaluate(b, ), 2.0, )"
"45 : Check.check(a3.evaluate(b, ), 3.0, )"
"46 : Check.check(a4.evaluate(b, ), 5.0, )"
"47 : Check.check(a1.toString(), \"(1.0 + -1.0)\", )"
"49 : Check.check(s1.evaluate(b, ), 3.0, )"
"50 : Check.check(s2.evaluate(b, ), 3.0, )"
"51 : Check.check(s3.evaluate(b, ), 1.0, )"
"52 : Check.check(s4.evaluate(b, ), 0, )"
"53 : Check.check(s1.toString(), \"(4.0 - 1.0)\", )"
"55 : Check.check(m1.evaluate(b, ), 1.0, )"
"56 : Check.check(m2.evaluate(b, ), 9, )"
"57 : Check.check(m1.toString(), \"(1.0 * -1.0)\", )"
"59 : Check.check(d1.evaluate(b, ), 1, )"
"60 : Check.check(d2.evaluate(b, ), 0, )"
"61 : Check.check(d1.toString(), \"(1.0 / -1.0)\", )"
"63 : Check.check(x.evaluate(b, ), 1, )"
"64 : Check.check(y.evaluate(b, ), 0, )"
"65 : Check.check(x.toString(), \"set x = 1.0\", )"
"67 : Check.check(x_id.evaluate(b, ), 1, )"
"68 : Check.check(y_id.evaluate(b, ), 0, )"
"69 : Check.check(x_id.toString(), \"x\", )"
}