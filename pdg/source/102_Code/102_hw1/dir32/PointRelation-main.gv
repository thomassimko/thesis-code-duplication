digraph G {
"7 : sc = new Scanner(System.in, )"
"8 : pt1 = 0"
"8 : pt1 = 0" -> "19 : pt1 = sc.nextInt()" [style=dashed]
"9 : pt2 = 0"
"9 : pt2 = 0" -> "47 : pt2 = sc.nextInt()" [style=dashed]
"10 : prompt1 = 0.0"
"10 : prompt1 = 0.0" -> "33 : prompt1 = sc.nextDouble()" [style=dashed]
"10 : prompt1 = 0.0" -> "24 : prompt1 = sc.nextDouble()" [style=dashed]
"11 : prompt2 = 0.0"
"11 : prompt2 = 0.0" -> "26 : prompt2 = sc.nextDouble()" [style=dashed]
"11 : prompt2 = 0.0" -> "35 : prompt2 = sc.nextDouble()" [style=dashed]
"12 : prompt3 = 0.0"
"12 : prompt3 = 0.0" -> "52 : prompt3 = sc.nextDouble()" [style=dashed]
"12 : prompt3 = 0.0" -> "61 : prompt3 = sc.nextDouble()" [style=dashed]
"13 : prompt4 = 0.0"
"13 : prompt4 = 0.0" -> "54 : prompt4 = sc.nextDouble()" [style=dashed]
"13 : prompt4 = 0.0" -> "63 : prompt4 = sc.nextDouble()" [style=dashed]
"14 : p1 = new CartesianPoint(0, 0, )"
"14 : p1 = new CartesianPoint(0, 0, )" -> "73 : System.out.println(\"Distance between points: \" + distance(p1, p2, ), )"
"14 : p1 = new CartesianPoint(0, 0, )" -> "77 : quad = quadrant(p1, p2, )"
"14 : p1 = new CartesianPoint(0, 0, )" -> "28 : p1 = new CartesianPoint(prompt1, prompt2, )" [style=dashed]
"14 : p1 = new CartesianPoint(0, 0, )" -> "37 : p1 = new PolarPoint(prompt1, prompt2, )" [style=dashed]
"15 : p2 = new CartesianPoint(0, 0, )"
"15 : p2 = new CartesianPoint(0, 0, )" -> "73 : System.out.println(\"Distance between points: \" + distance(p1, p2, ), )"
"15 : p2 = new CartesianPoint(0, 0, )" -> "77 : quad = quadrant(p1, p2, )"
"15 : p2 = new CartesianPoint(0, 0, )" -> "65 : p2 = new PolarPoint(prompt3, prompt4, )" [style=dashed]
"15 : p2 = new CartesianPoint(0, 0, )" -> "56 : p2 = new CartesianPoint(prompt3, prompt4, )" [style=dashed]
"17 : System.out.print(\"Which type of point should be created (1 for Cartesion, 2 for Polar)? \", )"
"19 : pt1 = sc.nextInt()"
"19 : pt1 = sc.nextInt()" -> "30 : pt1 == 2"
"19 : pt1 = sc.nextInt()" -> "21 : pt1 == 1"
"21 : pt1 == 1"
"23 : System.out.print(\"Enter x-coordinate: \", )"
"24 : prompt1 = sc.nextDouble()"
"24 : prompt1 = sc.nextDouble()" -> "28 : p1 = new CartesianPoint(prompt1, prompt2, )"
"25 : System.out.print(\"Enter y-coordinate: \", )"
"26 : prompt2 = sc.nextDouble()"
"26 : prompt2 = sc.nextDouble()" -> "28 : p1 = new CartesianPoint(prompt1, prompt2, )"
"28 : p1 = new CartesianPoint(prompt1, prompt2, )"
"28 : p1 = new CartesianPoint(prompt1, prompt2, )" -> "73 : System.out.println(\"Distance between points: \" + distance(p1, p2, ), )"
"28 : p1 = new CartesianPoint(prompt1, prompt2, )" -> "77 : quad = quadrant(p1, p2, )"
"30 : pt1 == 2"
"32 : System.out.print(\"Enter radius: \", )"
"33 : prompt1 = sc.nextDouble()"
"33 : prompt1 = sc.nextDouble()" -> "37 : p1 = new PolarPoint(prompt1, prompt2, )"
"34 : System.out.print(\"Enter angle in degrees: \", )"
"35 : prompt2 = sc.nextDouble()"
"35 : prompt2 = sc.nextDouble()" -> "37 : p1 = new PolarPoint(prompt1, prompt2, )"
"37 : p1 = new PolarPoint(prompt1, prompt2, )"
"37 : p1 = new PolarPoint(prompt1, prompt2, )" -> "73 : System.out.println(\"Distance between points: \" + distance(p1, p2, ), )"
"37 : p1 = new PolarPoint(prompt1, prompt2, )" -> "77 : quad = quadrant(p1, p2, )"
"41 : System.out.println(\"Invalid imput\", )"
"42 : System.exit(1, )"
"45 : System.out.print(\"Which type of point should be created (1 for Cartesion, 2 for Polar)? \", )"
"47 : pt2 = sc.nextInt()"
"47 : pt2 = sc.nextInt()" -> "58 : pt2 == 2"
"47 : pt2 = sc.nextInt()" -> "49 : pt2 == 1"
"49 : pt2 == 1"
"51 : System.out.print(\"Enter x-coordinate: \", )"
"52 : prompt3 = sc.nextDouble()"
"52 : prompt3 = sc.nextDouble()" -> "56 : p2 = new CartesianPoint(prompt3, prompt4, )"
"53 : System.out.print(\"Enter y-coordinate: \", )"
"54 : prompt4 = sc.nextDouble()"
"54 : prompt4 = sc.nextDouble()" -> "56 : p2 = new CartesianPoint(prompt3, prompt4, )"
"56 : p2 = new CartesianPoint(prompt3, prompt4, )"
"56 : p2 = new CartesianPoint(prompt3, prompt4, )" -> "73 : System.out.println(\"Distance between points: \" + distance(p1, p2, ), )"
"56 : p2 = new CartesianPoint(prompt3, prompt4, )" -> "77 : quad = quadrant(p1, p2, )"
"58 : pt2 == 2"
"60 : System.out.print(\"Enter radius: \", )"
"61 : prompt3 = sc.nextDouble()"
"61 : prompt3 = sc.nextDouble()" -> "65 : p2 = new PolarPoint(prompt3, prompt4, )"
"62 : System.out.print(\"Enter angle in degrees: \", )"
"63 : prompt4 = sc.nextDouble()"
"63 : prompt4 = sc.nextDouble()" -> "65 : p2 = new PolarPoint(prompt3, prompt4, )"
"65 : p2 = new PolarPoint(prompt3, prompt4, )"
"65 : p2 = new PolarPoint(prompt3, prompt4, )" -> "73 : System.out.println(\"Distance between points: \" + distance(p1, p2, ), )"
"65 : p2 = new PolarPoint(prompt3, prompt4, )" -> "77 : quad = quadrant(p1, p2, )"
"69 : System.out.println(\"Invalid imput\", )"
"70 : System.exit(1, )"
"73 : System.out.println(\"Distance between points: \" + distance(p1, p2, ), )"
"75 : quad = 0.0"
"75 : quad = 0.0" -> "77 : quad = quadrant(p1, p2, )" [style=dashed]
"77 : quad = quadrant(p1, p2, )"
"77 : quad = quadrant(p1, p2, )" -> "79 : quad == 1"
"79 : quad == 1"
"81 : System.out.println(\"In same quadrant.\", )"
"85 : System.out.println(\"Not in same quadrant.\", )"
}