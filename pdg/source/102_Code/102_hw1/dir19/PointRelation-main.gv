digraph G {
"7 : choiceReader = new Scanner(System.in, )"
"8 : pointReader = new Scanner(System.in, )"
"9 : choice = 0"
"9 : choice = 0" -> "23 : choice = choiceReader.nextInt()" [style=dashed]
"10 : x = 0.0"
"10 : x = 0.0" -> "27 : x = pointReader.nextDouble()" [style=dashed]
"10 : x2 = 0.0"
"10 : x2 = 0.0" -> "54 : x2 = pointReader.nextDouble()" [style=dashed]
"11 : y = 0.0"
"11 : y = 0.0" -> "29 : y = pointReader.nextDouble()" [style=dashed]
"11 : y2 = 0.0"
"11 : y2 = 0.0" -> "56 : y2 = pointReader.nextDouble()" [style=dashed]
"12 : radius = 0.0"
"12 : radius = 0.0" -> "62 : radius = pointReader.nextDouble()" [style=dashed]
"12 : radius = 0.0" -> "35 : radius = pointReader.nextDouble()" [style=dashed]
"13 : angle = 0.0"
"13 : angle = 0.0" -> "37 : angle = pointReader.nextDouble()" [style=dashed]
"13 : angle = 0.0" -> "64 : angle = pointReader.nextDouble()" [style=dashed]
"14 : distance = 0.0"
"14 : distance = 0.0" -> "76 : distance = distance_func(p1, p2, )" [style=dashed]
"15 : counter1 = 0"
"15 : counter2 = 0"
"16 : p1 = new CartesianPoint(0, 0, )"
"16 : p1 = new CartesianPoint(0, 0, )" -> "79 : quadrant(p1, p2, ) == true"
"16 : p1 = new CartesianPoint(0, 0, )" -> "76 : distance = distance_func(p1, p2, )"
"16 : p1 = new CartesianPoint(0, 0, )" -> "30 : p1 = new CartesianPoint(x, y, )" [style=dashed]
"16 : p1 = new CartesianPoint(0, 0, )" -> "41 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, )" [style=dashed]
"17 : p2 = new CartesianPoint(0, 0, )"
"17 : p2 = new CartesianPoint(0, 0, )" -> "79 : quadrant(p1, p2, ) == true"
"17 : p2 = new CartesianPoint(0, 0, )" -> "76 : distance = distance_func(p1, p2, )"
"17 : p2 = new CartesianPoint(0, 0, )" -> "68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )" [style=dashed]
"17 : p2 = new CartesianPoint(0, 0, )" -> "57 : p2 = new CartesianPoint(x2, y2, )" [style=dashed]
"19 : CartesianTestCases.testCartesianPoint()"
"20 : PolarTestCases.testPolarPoint()"
"22 : System.out.print(\"Which type of point should be created (1 for Cartesian, 2 for Polar)? \", )"
"23 : choice = choiceReader.nextInt()"
"23 : choice = choiceReader.nextInt()" -> "24 : choice == 1"
"23 : choice = choiceReader.nextInt()" -> "32 : choice == 2"
"23 : choice = choiceReader.nextInt()" -> "50 : choice = choiceReader.nextInt()" [style=dashed]
"24 : choice == 1"
"26 : System.out.print(\"Enter x-coordinate: \", )"
"27 : x = pointReader.nextDouble()"
"27 : x = pointReader.nextDouble()" -> "30 : p1 = new CartesianPoint(x, y, )"
"28 : System.out.print(\"Enter y-coordinate: \", )"
"29 : y = pointReader.nextDouble()"
"29 : y = pointReader.nextDouble()" -> "30 : p1 = new CartesianPoint(x, y, )"
"30 : p1 = new CartesianPoint(x, y, )"
"30 : p1 = new CartesianPoint(x, y, )" -> "79 : quadrant(p1, p2, ) == true"
"30 : p1 = new CartesianPoint(x, y, )" -> "76 : distance = distance_func(p1, p2, )"
"32 : choice == 2"
"34 : System.out.print(\"Enter radius: \", )"
"35 : radius = pointReader.nextDouble()"
"35 : radius = pointReader.nextDouble()" -> "41 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, )"
"35 : radius = pointReader.nextDouble()" -> "62 : radius = pointReader.nextDouble()" [style=dashed]
"36 : System.out.print(\"Enter angle (in degrees): \", )"
"37 : angle = pointReader.nextDouble()"
"37 : angle = pointReader.nextDouble()" -> "39 : angle = angle + 360"
"37 : angle = pointReader.nextDouble()" -> "41 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, )"
"37 : angle = pointReader.nextDouble()" -> "38 : angle < 0"
"37 : angle = pointReader.nextDouble()" -> "39 : angle = angle + 360" [style=dashed]
"37 : angle = pointReader.nextDouble()" -> "64 : angle = pointReader.nextDouble()" [style=dashed]
"38 : angle < 0"
"39 : angle = angle + 360"
"39 : angle = angle + 360" -> "41 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, )"
"39 : angle = angle + 360" -> "64 : angle = pointReader.nextDouble()" [style=dashed]
"41 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, )"
"41 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, )" -> "79 : quadrant(p1, p2, ) == true"
"41 : p1 = new PolarPoint(radius, Math.PI / 180 * angle, )" -> "76 : distance = distance_func(p1, p2, )"
"45 : System.out.println(\"Invalid choice.\", )"
"49 : System.out.print(\"Which type of point should be created (1 for Cartesian, 2 for Polar)? \", )"
"50 : choice = choiceReader.nextInt()"
"50 : choice = choiceReader.nextInt()" -> "51 : choice == 1"
"50 : choice = choiceReader.nextInt()" -> "59 : choice == 2"
"50 : choice = choiceReader.nextInt()" -> "50 : choice = choiceReader.nextInt()" [style=dashed]
"51 : choice == 1"
"53 : System.out.print(\"Enter x-coordinate: \", )"
"54 : x2 = pointReader.nextDouble()"
"54 : x2 = pointReader.nextDouble()" -> "57 : p2 = new CartesianPoint(x2, y2, )"
"54 : x2 = pointReader.nextDouble()" -> "54 : x2 = pointReader.nextDouble()" [style=dashed]
"55 : System.out.print(\"Enter y-coordinate: \", )"
"56 : y2 = pointReader.nextDouble()"
"56 : y2 = pointReader.nextDouble()" -> "57 : p2 = new CartesianPoint(x2, y2, )"
"56 : y2 = pointReader.nextDouble()" -> "56 : y2 = pointReader.nextDouble()" [style=dashed]
"57 : p2 = new CartesianPoint(x2, y2, )"
"57 : p2 = new CartesianPoint(x2, y2, )" -> "79 : quadrant(p1, p2, ) == true"
"57 : p2 = new CartesianPoint(x2, y2, )" -> "76 : distance = distance_func(p1, p2, )"
"57 : p2 = new CartesianPoint(x2, y2, )" -> "68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )" [style=dashed]
"57 : p2 = new CartesianPoint(x2, y2, )" -> "57 : p2 = new CartesianPoint(x2, y2, )" [style=dashed]
"59 : choice == 2"
"61 : System.out.print(\"Enter radius: \", )"
"62 : radius = pointReader.nextDouble()"
"62 : radius = pointReader.nextDouble()" -> "68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )"
"62 : radius = pointReader.nextDouble()" -> "62 : radius = pointReader.nextDouble()" [style=dashed]
"63 : System.out.print(\"Enter angle (in degrees): \", )"
"64 : angle = pointReader.nextDouble()"
"64 : angle = pointReader.nextDouble()" -> "68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )"
"64 : angle = pointReader.nextDouble()" -> "65 : angle < 0"
"64 : angle = pointReader.nextDouble()" -> "66 : angle = angle + 360"
"64 : angle = pointReader.nextDouble()" -> "64 : angle = pointReader.nextDouble()" [style=dashed]
"64 : angle = pointReader.nextDouble()" -> "66 : angle = angle + 360" [style=dashed]
"65 : angle < 0"
"66 : angle = angle + 360"
"66 : angle = angle + 360" -> "68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )"
"66 : angle = angle + 360" -> "64 : angle = pointReader.nextDouble()" [style=dashed]
"68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )"
"68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )" -> "79 : quadrant(p1, p2, ) == true"
"68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )" -> "76 : distance = distance_func(p1, p2, )"
"68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )" -> "68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )" [style=dashed]
"68 : p2 = new PolarPoint(radius, Math.PI / 180 * angle, )" -> "57 : p2 = new CartesianPoint(x2, y2, )" [style=dashed]
"72 : System.out.println(\"Invalid choice.\", )"
"76 : distance = distance_func(p1, p2, )"
"76 : distance = distance_func(p1, p2, )" -> "77 : System.out.println(\"Distance between points: \" + distance, )"
"76 : distance = distance_func(p1, p2, )" -> "76 : distance = distance_func(p1, p2, )" [style=dashed]
"77 : System.out.println(\"Distance between points: \" + distance, )"
"79 : quadrant(p1, p2, ) == true"
"80 : System.out.println(\"Same quadrant.\", )"
"83 : System.out.println(\"Not in the same quadrant.\", )"
}