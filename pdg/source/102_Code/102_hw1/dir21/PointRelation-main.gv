digraph G {
"7 : scanner = new Scanner(System.in, )"
"8 : p1 = new CartesianPoint(0, 0, )"
"8 : p1 = new CartesianPoint(0, 0, )" -> "80 : quadrant(p1, p2, )"
"8 : p1 = new CartesianPoint(0, 0, )" -> "76 : coordDistance = distance(p1, p2, )"
"8 : p1 = new CartesianPoint(0, 0, )" -> "24 : p1 = new CartesianPoint(xp1, yp1, )" [style=dashed]
"8 : p1 = new CartesianPoint(0, 0, )" -> "36 : p1 = new PolarPoint(rp1, ap1, )" [style=dashed]
"9 : p2 = new CartesianPoint(0, 0, )"
"9 : p2 = new CartesianPoint(0, 0, )" -> "80 : quadrant(p1, p2, )"
"9 : p2 = new CartesianPoint(0, 0, )" -> "76 : coordDistance = distance(p1, p2, )"
"9 : p2 = new CartesianPoint(0, 0, )" -> "56 : p2 = new CartesianPoint(xp2, yp2, )" [style=dashed]
"9 : p2 = new CartesianPoint(0, 0, )" -> "68 : p2 = new PolarPoint(rp2, ap2, )" [style=dashed]
"12 : System.out.print(\"Which type of point should be created (1 for Cartesion, 2 for Polar)? \", )"
"13 : pType1 = scanner.nextInt()"
"13 : pType1 = scanner.nextInt()" -> "27 : pType1 == 2"
"13 : pType1 = scanner.nextInt()" -> "15 : pType1 == 1"
"15 : pType1 == 1"
"18 : System.out.print(\"Enter x-coordinate: \", )"
"19 : xp1 = scanner.nextDouble()"
"19 : xp1 = scanner.nextDouble()" -> "24 : p1 = new CartesianPoint(xp1, yp1, )"
"21 : System.out.print(\"Enter y-coordinate: \", )"
"22 : yp1 = scanner.nextDouble()"
"22 : yp1 = scanner.nextDouble()" -> "24 : p1 = new CartesianPoint(xp1, yp1, )"
"24 : p1 = new CartesianPoint(xp1, yp1, )"
"24 : p1 = new CartesianPoint(xp1, yp1, )" -> "80 : quadrant(p1, p2, )"
"24 : p1 = new CartesianPoint(xp1, yp1, )" -> "76 : coordDistance = distance(p1, p2, )"
"27 : pType1 == 2"
"30 : System.out.print(\"Enter radius: \", )"
"31 : rp1 = scanner.nextDouble()"
"31 : rp1 = scanner.nextDouble()" -> "36 : p1 = new PolarPoint(rp1, ap1, )"
"33 : System.out.print(\"Enter angle: \", )"
"34 : ap1 = scanner.nextDouble() * Math.PI / 180"
"34 : ap1 = scanner.nextDouble() * Math.PI / 180" -> "36 : p1 = new PolarPoint(rp1, ap1, )"
"36 : p1 = new PolarPoint(rp1, ap1, )"
"36 : p1 = new PolarPoint(rp1, ap1, )" -> "80 : quadrant(p1, p2, )"
"36 : p1 = new PolarPoint(rp1, ap1, )" -> "76 : coordDistance = distance(p1, p2, )"
"40 : System.out.println(\"Error, incorrect input.\", )"
"41 : System.exit(1, )"
"44 : System.out.print(\"Which type of point should be created (1 for Cartesion, 2 for Polar)? \", )"
"45 : pType2 = scanner.nextInt()"
"45 : pType2 = scanner.nextInt()" -> "59 : pType2 == 2"
"45 : pType2 = scanner.nextInt()" -> "47 : pType2 == 1"
"47 : pType2 == 1"
"50 : System.out.print(\"Enter x-coordinate: \", )"
"51 : xp2 = scanner.nextDouble()"
"51 : xp2 = scanner.nextDouble()" -> "56 : p2 = new CartesianPoint(xp2, yp2, )"
"53 : System.out.print(\"Enter y-coordinate: \", )"
"54 : yp2 = scanner.nextDouble()"
"54 : yp2 = scanner.nextDouble()" -> "56 : p2 = new CartesianPoint(xp2, yp2, )"
"56 : p2 = new CartesianPoint(xp2, yp2, )"
"56 : p2 = new CartesianPoint(xp2, yp2, )" -> "80 : quadrant(p1, p2, )"
"56 : p2 = new CartesianPoint(xp2, yp2, )" -> "76 : coordDistance = distance(p1, p2, )"
"59 : pType2 == 2"
"62 : System.out.print(\"Enter radius: \", )"
"63 : rp2 = scanner.nextDouble()"
"63 : rp2 = scanner.nextDouble()" -> "68 : p2 = new PolarPoint(rp2, ap2, )"
"65 : System.out.print(\"Enter angle: \", )"
"66 : ap2 = scanner.nextDouble() * Math.PI / 180"
"66 : ap2 = scanner.nextDouble() * Math.PI / 180" -> "68 : p2 = new PolarPoint(rp2, ap2, )"
"68 : p2 = new PolarPoint(rp2, ap2, )"
"68 : p2 = new PolarPoint(rp2, ap2, )" -> "80 : quadrant(p1, p2, )"
"68 : p2 = new PolarPoint(rp2, ap2, )" -> "76 : coordDistance = distance(p1, p2, )"
"72 : System.out.println(\"Error, incorrect input.\", )"
"73 : System.exit(1, )"
"76 : coordDistance = distance(p1, p2, )"
"76 : coordDistance = distance(p1, p2, )" -> "78 : System.out.println(\"Distance between points: \" + coordDistance, )"
"78 : System.out.println(\"Distance between points: \" + coordDistance, )"
"80 : quadrant(p1, p2, )"
}