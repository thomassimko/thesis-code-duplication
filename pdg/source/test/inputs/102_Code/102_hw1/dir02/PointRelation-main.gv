digraph G {
"42 : type = 0"
"43 : j = 0"
"43 : j = 0" -> "51 : j = 0" [style=dashed]
"44 : p1 = new CartesianPoint(1.0, 1.0, )"
"44 : p1 = new CartesianPoint(1.0, 1.0, )" -> "45 : p2 = p1"
"44 : p1 = new CartesianPoint(1.0, 1.0, )" -> "101 : quad(p1, p2, )"
"44 : p1 = new CartesianPoint(1.0, 1.0, )" -> "99 : point_distance = distance(p1, p2, )"
"45 : p2 = p1"
"45 : p2 = p1" -> "101 : quad(p1, p2, )"
"45 : p2 = p1" -> "99 : point_distance = distance(p1, p2, )"
"46 : radius = 0.0"
"47 : angle = 0.0"
"48 : x = 0.0"
"49 : y = 0.0"
"50 : in = new Scanner(System.in, )"
"51 : j = 0"
"51 : j = 0" -> "51 : j < 2"
"51 : j < 2"
"53 : System.out.print(\"1 for Cartesian 2 for Polar: \", )"
"99 : point_distance = distance(p1, p2, )"
"99 : point_distance = distance(p1, p2, )" -> "100 : System.out.println(\"The distance between the two points is: \" + point_distance, )"
"100 : System.out.println(\"The distance between the two points is: \" + point_distance, )"
"101 : quad(p1, p2, )"
"56 : type = in.nextInt()"
"56 : type = in.nextInt()" -> "68 : type == 1"
"56 : type = in.nextInt()" -> "83 : type == 2"
"56 : type = in.nextInt()" -> "63 : type != 1 && type != 2"
"56 : type = in.nextInt()" -> "65 : System.out.println(type + \" is not a valid option.\", )"
"63 : type != 1 && type != 2"
"60 : System.out.println(\"Invalid data type.\", )"
"61 : System.exit(1, )"
"65 : System.out.println(type + \" is not a valid option.\", )"
"66 : System.exit(1, )"
"68 : type == 1"
"70 : System.out.print(\"Enter x coordinate \", )"
"71 : x = in.nextDouble()"
"71 : x = in.nextDouble()" -> "76 : p1 = new CartesianPoint(x, y, )"
"71 : x = in.nextDouble()" -> "80 : p2 = new CartesianPoint(x, y, )"
"72 : System.out.print(\"Enter y coordinate \", )"
"73 : y = in.nextDouble()"
"73 : y = in.nextDouble()" -> "76 : p1 = new CartesianPoint(x, y, )"
"73 : y = in.nextDouble()" -> "80 : p2 = new CartesianPoint(x, y, )"
"74 : j == 1"
"76 : p1 = new CartesianPoint(x, y, )"
"76 : p1 = new CartesianPoint(x, y, )" -> "101 : quad(p1, p2, )"
"76 : p1 = new CartesianPoint(x, y, )" -> "99 : point_distance = distance(p1, p2, )"
"80 : p2 = new CartesianPoint(x, y, )"
"80 : p2 = new CartesianPoint(x, y, )" -> "101 : quad(p1, p2, )"
"80 : p2 = new CartesianPoint(x, y, )" -> "99 : point_distance = distance(p1, p2, )"
"83 : type == 2"
"85 : System.out.print(\"Enter radius \", )"
"86 : radius = in.nextDouble()"
"86 : radius = in.nextDouble()" -> "91 : p1 = new PolarPoint(radius, angle * Math.PI / 180, )"
"86 : radius = in.nextDouble()" -> "95 : p2 = new PolarPoint(radius, angle * Math.PI / 180, )"
"87 : System.out.print(\"Enter angle \", )"
"88 : angle = in.nextDouble()"
"88 : angle = in.nextDouble()" -> "91 : p1 = new PolarPoint(radius, angle * Math.PI / 180, )"
"88 : angle = in.nextDouble()" -> "95 : p2 = new PolarPoint(radius, angle * Math.PI / 180, )"
"89 : j == 1"
"91 : p1 = new PolarPoint(radius, angle * Math.PI / 180, )"
"91 : p1 = new PolarPoint(radius, angle * Math.PI / 180, )" -> "101 : quad(p1, p2, )"
"91 : p1 = new PolarPoint(radius, angle * Math.PI / 180, )" -> "99 : point_distance = distance(p1, p2, )"
"95 : p2 = new PolarPoint(radius, angle * Math.PI / 180, )"
"95 : p2 = new PolarPoint(radius, angle * Math.PI / 180, )" -> "101 : quad(p1, p2, )"
"95 : p2 = new PolarPoint(radius, angle * Math.PI / 180, )" -> "99 : point_distance = distance(p1, p2, )"
"51 : @temp1 = j"
"51 : j = j + 1"
"51 : j = j + 1" -> "51 : j < 2"
"103 : System.out.println(\"In same quadrant\", )"
"107 : System.out.println(\"Not in same quadrant\", )"
}