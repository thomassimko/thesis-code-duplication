digraph G {
"7 : in = new Scanner(System.in, )"
"8 : p1 = new CartesianPoint(0.0, 0.0, )"
"8 : p1 = new CartesianPoint(0.0, 0.0, )" -> "62 : distance = distanceBetween(p1, p2, )"
"8 : p1 = new CartesianPoint(0.0, 0.0, )" -> "64 : sameQuadrant(p1, p2, ) == true"
"8 : p1 = new CartesianPoint(0.0, 0.0, )" -> "20 : p1 = new CartesianPoint(x1, y1, )" [style=dashed]
"8 : p1 = new CartesianPoint(0.0, 0.0, )" -> "28 : p1 = new PolarPoint(r1, a1, )" [style=dashed]
"9 : p2 = new CartesianPoint(0.0, 0.0, )"
"9 : p2 = new CartesianPoint(0.0, 0.0, )" -> "62 : distance = distanceBetween(p1, p2, )"
"9 : p2 = new CartesianPoint(0.0, 0.0, )" -> "64 : sameQuadrant(p1, p2, ) == true"
"9 : p2 = new CartesianPoint(0.0, 0.0, )" -> "54 : p2 = new PolarPoint(r2, a2, )" [style=dashed]
"9 : p2 = new CartesianPoint(0.0, 0.0, )" -> "46 : p2 = new CartesianPoint(x2, y2, )" [style=dashed]
"10 : System.out.print(\"Which type of point should be created (1 for Cartesian, 2 for Polar)? \", )"
"11 : type1 = in.nextInt()"
"11 : type1 = in.nextInt()" -> "12 : type1 == 1 || type1 == 2"
"11 : type1 = in.nextInt()" -> "14 : type1 == 1"
"12 : type1 == 1 || type1 == 2"
"14 : type1 == 1"
"16 : System.out.print(\"Enter x-coordinate: \", )"
"17 : x1 = in.nextDouble()"
"17 : x1 = in.nextDouble()" -> "20 : p1 = new CartesianPoint(x1, y1, )"
"18 : System.out.print(\"Enter y-coordinate: \", )"
"19 : y1 = in.nextDouble()"
"19 : y1 = in.nextDouble()" -> "20 : p1 = new CartesianPoint(x1, y1, )"
"20 : p1 = new CartesianPoint(x1, y1, )"
"20 : p1 = new CartesianPoint(x1, y1, )" -> "62 : distance = distanceBetween(p1, p2, )"
"20 : p1 = new CartesianPoint(x1, y1, )" -> "64 : sameQuadrant(p1, p2, ) == true"
"24 : System.out.print(\"Enter radius: \", )"
"25 : r1 = in.nextDouble()"
"25 : r1 = in.nextDouble()" -> "28 : p1 = new PolarPoint(r1, a1, )"
"26 : System.out.print(\"Enter angle (in degrees): \", )"
"27 : a1 = in.nextDouble()"
"27 : a1 = in.nextDouble()" -> "28 : p1 = new PolarPoint(r1, a1, )"
"28 : p1 = new PolarPoint(r1, a1, )"
"28 : p1 = new PolarPoint(r1, a1, )" -> "62 : distance = distanceBetween(p1, p2, )"
"28 : p1 = new PolarPoint(r1, a1, )" -> "64 : sameQuadrant(p1, p2, ) == true"
"33 : System.out.println(\"Error: Please choose either point type Cartesian (1) or type Polar (2).\", )"
"34 : System.exit(1, )"
"36 : System.out.print(\"Which type of point should be created (1 for Cartesian, 2 for Polar)? \", )"
"37 : type2 = in.nextInt()"
"37 : type2 = in.nextInt()" -> "40 : type2 == 1"
"37 : type2 = in.nextInt()" -> "38 : type2 == 1 || type2 == 2"
"38 : type2 == 1 || type2 == 2"
"40 : type2 == 1"
"42 : System.out.print(\"Enter x-coordinate: \", )"
"43 : x2 = in.nextDouble()"
"43 : x2 = in.nextDouble()" -> "46 : p2 = new CartesianPoint(x2, y2, )"
"44 : System.out.print(\"Enter y-coordinate: \", )"
"45 : y2 = in.nextDouble()"
"45 : y2 = in.nextDouble()" -> "46 : p2 = new CartesianPoint(x2, y2, )"
"46 : p2 = new CartesianPoint(x2, y2, )"
"46 : p2 = new CartesianPoint(x2, y2, )" -> "62 : distance = distanceBetween(p1, p2, )"
"46 : p2 = new CartesianPoint(x2, y2, )" -> "64 : sameQuadrant(p1, p2, ) == true"
"50 : System.out.print(\"Enter radius: \", )"
"51 : r2 = in.nextDouble()"
"51 : r2 = in.nextDouble()" -> "54 : p2 = new PolarPoint(r2, a2, )"
"52 : System.out.print(\"Enter angle (in degrees): \", )"
"53 : a2 = in.nextDouble()"
"53 : a2 = in.nextDouble()" -> "54 : p2 = new PolarPoint(r2, a2, )"
"54 : p2 = new PolarPoint(r2, a2, )"
"54 : p2 = new PolarPoint(r2, a2, )" -> "62 : distance = distanceBetween(p1, p2, )"
"54 : p2 = new PolarPoint(r2, a2, )" -> "64 : sameQuadrant(p1, p2, ) == true"
"59 : System.out.println(\"Error: Please choose either point type Cartesian (1) or type Polar (2).\", )"
"60 : System.exit(1, )"
"62 : distance = distanceBetween(p1, p2, )"
"62 : distance = distanceBetween(p1, p2, )" -> "63 : System.out.println(\"Distance between points: \" + distance, )"
"63 : System.out.println(\"Distance between points: \" + distance, )"
"64 : sameQuadrant(p1, p2, ) == true"
"66 : System.out.println(\"In same quadrant.\", )"
"70 : System.out.println(\"Not in same quadrant.\", )"
}