digraph G {
"7 : p1 = new CartesianPoint(0, 0, )"
"7 : p1 = new CartesianPoint(0, 0, )" -> "66 : compute_distance(p1, p2, )"
"7 : p1 = new CartesianPoint(0, 0, )" -> "67 : System.out.println(\"Distance between points: \" + compute_distance(p1, p2, ), )"
"7 : p1 = new CartesianPoint(0, 0, )" -> "68 : distance_quadrant(quadrant(p1, p2, ), )"
"7 : p1 = new CartesianPoint(0, 0, )" -> "32 : p1 = new PolarPoint(radius_1, theta_1, )" [style=dashed]
"7 : p1 = new CartesianPoint(0, 0, )" -> "19 : p1 = new CartesianPoint(x1, y1, )" [style=dashed]
"8 : p2 = new CartesianPoint(0, 0, )"
"8 : p2 = new CartesianPoint(0, 0, )" -> "66 : compute_distance(p1, p2, )"
"8 : p2 = new CartesianPoint(0, 0, )" -> "67 : System.out.println(\"Distance between points: \" + compute_distance(p1, p2, ), )"
"8 : p2 = new CartesianPoint(0, 0, )" -> "68 : distance_quadrant(quadrant(p1, p2, ), )"
"8 : p2 = new CartesianPoint(0, 0, )" -> "47 : p2 = new CartesianPoint(x2, y2, )" [style=dashed]
"8 : p2 = new CartesianPoint(0, 0, )" -> "60 : p2 = new PolarPoint(radius_2, theta_2, )" [style=dashed]
"9 : input = new Scanner(System.in, )"
"11 : System.out.print(\"Which type of point should be created (1 for Cartesian, 2 for Polar)? \", )"
"12 : choice_1 = input.nextInt()"
"12 : choice_1 = input.nextInt()" -> "21 : choice_1 == 2"
"12 : choice_1 = input.nextInt()" -> "13 : choice_1 == 1"
"13 : choice_1 == 1"
"15 : System.out.print(\"Enter x-coordinate: \", )"
"16 : x1 = input.nextDouble()"
"16 : x1 = input.nextDouble()" -> "19 : p1 = new CartesianPoint(x1, y1, )"
"17 : System.out.print(\"Enter y-coordinate: \", )"
"18 : y1 = input.nextDouble()"
"18 : y1 = input.nextDouble()" -> "19 : p1 = new CartesianPoint(x1, y1, )"
"19 : p1 = new CartesianPoint(x1, y1, )"
"19 : p1 = new CartesianPoint(x1, y1, )" -> "66 : compute_distance(p1, p2, )"
"19 : p1 = new CartesianPoint(x1, y1, )" -> "67 : System.out.println(\"Distance between points: \" + compute_distance(p1, p2, ), )"
"19 : p1 = new CartesianPoint(x1, y1, )" -> "68 : distance_quadrant(quadrant(p1, p2, ), )"
"21 : choice_1 == 2"
"23 : System.out.print(\"Enter radius: \", )"
"24 : radius_1 = input.nextDouble()"
"24 : radius_1 = input.nextDouble()" -> "32 : p1 = new PolarPoint(radius_1, theta_1, )"
"25 : System.out.print(\"Enter angle (in degrees): \", )"
"26 : angle_1 = input.nextDouble()"
"26 : angle_1 = input.nextDouble()" -> "27 : angle_1 < 0"
"26 : angle_1 = input.nextDouble()" -> "29 : angle_1 = angle_1 + 360"
"26 : angle_1 = input.nextDouble()" -> "31 : theta_1 = Math.toRadians(angle_1, )"
"26 : angle_1 = input.nextDouble()" -> "29 : angle_1 = angle_1 + 360" [style=dashed]
"27 : angle_1 < 0"
"29 : angle_1 = angle_1 + 360"
"29 : angle_1 = angle_1 + 360" -> "31 : theta_1 = Math.toRadians(angle_1, )"
"31 : theta_1 = Math.toRadians(angle_1, )"
"31 : theta_1 = Math.toRadians(angle_1, )" -> "32 : p1 = new PolarPoint(radius_1, theta_1, )"
"32 : p1 = new PolarPoint(radius_1, theta_1, )"
"32 : p1 = new PolarPoint(radius_1, theta_1, )" -> "66 : compute_distance(p1, p2, )"
"32 : p1 = new PolarPoint(radius_1, theta_1, )" -> "67 : System.out.println(\"Distance between points: \" + compute_distance(p1, p2, ), )"
"32 : p1 = new PolarPoint(radius_1, theta_1, )" -> "68 : distance_quadrant(quadrant(p1, p2, ), )"
"36 : System.exit(1, )"
"39 : System.out.print(\"Which type of point should be created (1 for Cartesian, 2 for Polar)? \", )"
"40 : choice_2 = input.nextInt()"
"40 : choice_2 = input.nextInt()" -> "49 : choice_2 == 2"
"40 : choice_2 = input.nextInt()" -> "41 : choice_2 == 1"
"41 : choice_2 == 1"
"43 : System.out.print(\"Enter x-coordinate: \", )"
"44 : x2 = input.nextDouble()"
"44 : x2 = input.nextDouble()" -> "47 : p2 = new CartesianPoint(x2, y2, )"
"45 : System.out.print(\"Enter y-coordinate: \", )"
"46 : y2 = input.nextDouble()"
"46 : y2 = input.nextDouble()" -> "47 : p2 = new CartesianPoint(x2, y2, )"
"47 : p2 = new CartesianPoint(x2, y2, )"
"47 : p2 = new CartesianPoint(x2, y2, )" -> "66 : compute_distance(p1, p2, )"
"47 : p2 = new CartesianPoint(x2, y2, )" -> "67 : System.out.println(\"Distance between points: \" + compute_distance(p1, p2, ), )"
"47 : p2 = new CartesianPoint(x2, y2, )" -> "68 : distance_quadrant(quadrant(p1, p2, ), )"
"49 : choice_2 == 2"
"51 : System.out.print(\"Enter radius: \", )"
"52 : radius_2 = input.nextDouble()"
"52 : radius_2 = input.nextDouble()" -> "60 : p2 = new PolarPoint(radius_2, theta_2, )"
"53 : System.out.print(\"Enter angle (in degrees): \", )"
"54 : angle_2 = input.nextDouble()"
"54 : angle_2 = input.nextDouble()" -> "55 : angle_2 < 0"
"54 : angle_2 = input.nextDouble()" -> "57 : angle_2 = angle_2 + 360"
"54 : angle_2 = input.nextDouble()" -> "59 : theta_2 = Math.toRadians(angle_2, )"
"54 : angle_2 = input.nextDouble()" -> "57 : angle_2 = angle_2 + 360" [style=dashed]
"55 : angle_2 < 0"
"57 : angle_2 = angle_2 + 360"
"57 : angle_2 = angle_2 + 360" -> "59 : theta_2 = Math.toRadians(angle_2, )"
"59 : theta_2 = Math.toRadians(angle_2, )"
"59 : theta_2 = Math.toRadians(angle_2, )" -> "60 : p2 = new PolarPoint(radius_2, theta_2, )"
"60 : p2 = new PolarPoint(radius_2, theta_2, )"
"60 : p2 = new PolarPoint(radius_2, theta_2, )" -> "66 : compute_distance(p1, p2, )"
"60 : p2 = new PolarPoint(radius_2, theta_2, )" -> "67 : System.out.println(\"Distance between points: \" + compute_distance(p1, p2, ), )"
"60 : p2 = new PolarPoint(radius_2, theta_2, )" -> "68 : distance_quadrant(quadrant(p1, p2, ), )"
"64 : System.exit(1, )"
"66 : compute_distance(p1, p2, )"
"67 : System.out.println(\"Distance between points: \" + compute_distance(p1, p2, ), )"
"68 : distance_quadrant(quadrant(p1, p2, ), )"
}