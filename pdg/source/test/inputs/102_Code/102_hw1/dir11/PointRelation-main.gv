digraph G {
"81 : cartesian = 1"
"81 : cartesian = 1" -> "90 : choice == cartesian"
"81 : cartesian = 1" -> "114 : choice2 == cartesian"
"82 : polar = 2"
"82 : polar = 2" -> "122 : choice2 == polar"
"82 : polar = 2" -> "98 : choice == polar"
"83 : choice = 0"
"83 : choice = 0" -> "89 : choice = scan.nextInt()" [style=dashed]
"83 : choice2 = 0"
"83 : choice2 = 0" -> "113 : choice2 = scan.nextInt()" [style=dashed]
"83 : flag = 0"
"84 : x_val = 0.0"
"84 : x_val = 0.0" -> "93 : x_val = scan.nextDouble()" [style=dashed]
"84 : x_val2 = 0.0"
"84 : x_val2 = 0.0" -> "117 : x_val2 = scan.nextDouble()" [style=dashed]
"84 : y_val = 0.0"
"84 : y_val = 0.0" -> "95 : y_val = scan.nextDouble()" [style=dashed]
"84 : y_val2 = 0.0"
"84 : y_val2 = 0.0" -> "119 : y_val2 = scan.nextDouble()" [style=dashed]
"84 : rad = 0.0"
"84 : rad = 0.0" -> "101 : rad = scan.nextDouble()" [style=dashed]
"84 : rad2 = 0.0"
"84 : rad2 = 0.0" -> "125 : rad2 = scan.nextDouble()" [style=dashed]
"84 : ang = 0.0"
"84 : ang = 0.0" -> "103 : ang = scan.nextDouble()" [style=dashed]
"84 : ang2 = 0.0"
"84 : ang2 = 0.0" -> "127 : ang2 = scan.nextDouble()" [style=dashed]
"84 : distance = 0.0"
"84 : distance = 0.0" -> "136 : distance = DistanceCalc(pt1, pt2, )" [style=dashed]
"84 : ang3 = 0.0"
"84 : ang3 = 0.0" -> "104 : ang3 = ang * 3.1415296 / 180" [style=dashed]
"84 : ang4 = 0.0"
"84 : ang4 = 0.0" -> "128 : ang4 = ang2 * 3.1415927 / 180" [style=dashed]
"85 : pt1 = null"
"85 : pt1 = null" -> "138 : quadrantTest(pt1, pt2, )"
"85 : pt1 = null" -> "136 : distance = DistanceCalc(pt1, pt2, )"
"85 : pt1 = null" -> "96 : pt1 = new CartesianPoint(x_val, y_val, )" [style=dashed]
"85 : pt1 = null" -> "105 : pt1 = new PolarPoint(rad, ang3, )" [style=dashed]
"86 : pt2 = null"
"86 : pt2 = null" -> "138 : quadrantTest(pt1, pt2, )"
"86 : pt2 = null" -> "136 : distance = DistanceCalc(pt1, pt2, )"
"86 : pt2 = null" -> "129 : pt2 = new PolarPoint(rad2, ang4, )" [style=dashed]
"86 : pt2 = null" -> "120 : pt2 = new CartesianPoint(x_val2, y_val2, )" [style=dashed]
"87 : scan = new Scanner(System.in, )"
"88 : System.out.print(\"Which type of point should be created (1 for Cartesion, 2 for Polar)? \", )"
"89 : choice = scan.nextInt()"
"89 : choice = scan.nextInt()" -> "90 : choice == cartesian"
"89 : choice = scan.nextInt()" -> "98 : choice == polar"
"90 : choice == cartesian"
"92 : System.out.print(\"Enter x-coordinate: \", )"
"93 : x_val = scan.nextDouble()"
"93 : x_val = scan.nextDouble()" -> "96 : pt1 = new CartesianPoint(x_val, y_val, )"
"94 : System.out.print(\"Enter y-coordinate: \", )"
"95 : y_val = scan.nextDouble()"
"95 : y_val = scan.nextDouble()" -> "96 : pt1 = new CartesianPoint(x_val, y_val, )"
"96 : pt1 = new CartesianPoint(x_val, y_val, )"
"96 : pt1 = new CartesianPoint(x_val, y_val, )" -> "138 : quadrantTest(pt1, pt2, )"
"96 : pt1 = new CartesianPoint(x_val, y_val, )" -> "136 : distance = DistanceCalc(pt1, pt2, )"
"98 : choice == polar"
"100 : System.out.print(\"Enter radius: \", )"
"101 : rad = scan.nextDouble()"
"101 : rad = scan.nextDouble()" -> "105 : pt1 = new PolarPoint(rad, ang3, )"
"102 : System.out.print(\"Enter angle (in degrees): \", )"
"103 : ang = scan.nextDouble()"
"103 : ang = scan.nextDouble()" -> "104 : ang3 = ang * 3.1415296 / 180"
"104 : ang3 = ang * 3.1415296 / 180"
"104 : ang3 = ang * 3.1415296 / 180" -> "105 : pt1 = new PolarPoint(rad, ang3, )"
"105 : pt1 = new PolarPoint(rad, ang3, )"
"105 : pt1 = new PolarPoint(rad, ang3, )" -> "138 : quadrantTest(pt1, pt2, )"
"105 : pt1 = new PolarPoint(rad, ang3, )" -> "136 : distance = DistanceCalc(pt1, pt2, )"
"109 : System.out.println(\"Sorry, invalid type. Please try again.\", )"
"110 : System.exit(1, )"
"112 : System.out.print(\"Which type of point should be created (1 for Cartesion, 2 for Polar)? \", )"
"113 : choice2 = scan.nextInt()"
"113 : choice2 = scan.nextInt()" -> "122 : choice2 == polar"
"113 : choice2 = scan.nextInt()" -> "114 : choice2 == cartesian"
"114 : choice2 == cartesian"
"116 : System.out.print(\"Enter x-coordinate: \", )"
"117 : x_val2 = scan.nextDouble()"
"117 : x_val2 = scan.nextDouble()" -> "120 : pt2 = new CartesianPoint(x_val2, y_val2, )"
"118 : System.out.print(\"Enter y-coordinate: \", )"
"119 : y_val2 = scan.nextDouble()"
"119 : y_val2 = scan.nextDouble()" -> "120 : pt2 = new CartesianPoint(x_val2, y_val2, )"
"120 : pt2 = new CartesianPoint(x_val2, y_val2, )"
"120 : pt2 = new CartesianPoint(x_val2, y_val2, )" -> "138 : quadrantTest(pt1, pt2, )"
"120 : pt2 = new CartesianPoint(x_val2, y_val2, )" -> "136 : distance = DistanceCalc(pt1, pt2, )"
"122 : choice2 == polar"
"124 : System.out.print(\"Enter radius: \", )"
"125 : rad2 = scan.nextDouble()"
"125 : rad2 = scan.nextDouble()" -> "129 : pt2 = new PolarPoint(rad2, ang4, )"
"126 : System.out.print(\"Enter angle (in degrees): \", )"
"127 : ang2 = scan.nextDouble()"
"127 : ang2 = scan.nextDouble()" -> "128 : ang4 = ang2 * 3.1415927 / 180"
"128 : ang4 = ang2 * 3.1415927 / 180"
"128 : ang4 = ang2 * 3.1415927 / 180" -> "129 : pt2 = new PolarPoint(rad2, ang4, )"
"129 : pt2 = new PolarPoint(rad2, ang4, )"
"129 : pt2 = new PolarPoint(rad2, ang4, )" -> "138 : quadrantTest(pt1, pt2, )"
"129 : pt2 = new PolarPoint(rad2, ang4, )" -> "136 : distance = DistanceCalc(pt1, pt2, )"
"133 : System.out.println(\"Sorry, invalid type. Please try again.\", )"
"134 : System.exit(1, )"
"136 : distance = DistanceCalc(pt1, pt2, )"
"136 : distance = DistanceCalc(pt1, pt2, )" -> "137 : System.out.println(\"Distance between points: \" + distance, )"
"137 : System.out.println(\"Distance between points: \" + distance, )"
"138 : quadrantTest(pt1, pt2, )"
}