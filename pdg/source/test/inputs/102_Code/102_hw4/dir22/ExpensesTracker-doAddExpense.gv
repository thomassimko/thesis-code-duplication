digraph G {
"33 : System.out.println(\"Expense type (in-full, partial)?) \", )"
"34 : type = sc.nextLine()"
"35 : System.out.println(\"Payment date: \", )"
"36 : date = sc.nextLine()"
"36 : date = sc.nextLine()" -> "43 : dateScan = new Scanner(date, )"
"37 : System.out.println(\"Expense Amount: \", )"
"38 : amt = sc.nextLine()"
"39 : System.out.println(\"Who was this expense paid to? \", )"
"40 : payee = sc.nextLine()"
"40 : payee = sc.nextLine()" -> "69 : E = new InFullExpense(cal, dollars, cents, payee, cat, )"
"40 : payee = sc.nextLine()" -> "64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )"
"41 : System.out.println(\"Expense Category: \", )"
"42 : cat = sc.nextLine()"
"42 : cat = sc.nextLine()" -> "69 : E = new InFullExpense(cal, dollars, cents, payee, cat, )"
"42 : cat = sc.nextLine()" -> "64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )"
"43 : dateScan = new Scanner(date, )"
"44 : dateScan.useDelimiter(\"/\", )"
"45 : month = dateScan.nextInt() - 1"
"45 : month = dateScan.nextInt() - 1" -> "54 : cal = new GregorianCalendar(year, month, day, )"
"46 : day = dateScan.nextInt()"
"46 : day = dateScan.nextInt()" -> "54 : cal = new GregorianCalendar(year, month, day, )"
"47 : year = dateScan.nextInt()"
"47 : year = dateScan.nextInt()" -> "54 : cal = new GregorianCalendar(year, month, day, )"
"48 : dateScan.close()"
"49 : PTindex = amt.indexOf(\".\", )"
"49 : PTindex = amt.indexOf(\".\", )" -> "50 : d = amt.substring(0, PTindex, )"
"49 : PTindex = amt.indexOf(\".\", )" -> "51 : c = amt.substring(PTindex + 1, amt.length(), )"
"50 : d = amt.substring(0, PTindex, )"
"50 : d = amt.substring(0, PTindex, )" -> "52 : dollars = Integer.parseInt(d, )"
"51 : c = amt.substring(PTindex + 1, amt.length(), )"
"51 : c = amt.substring(PTindex + 1, amt.length(), )" -> "53 : cents = Integer.parseInt(c, )"
"52 : dollars = Integer.parseInt(d, )"
"52 : dollars = Integer.parseInt(d, )" -> "69 : E = new InFullExpense(cal, dollars, cents, payee, cat, )"
"52 : dollars = Integer.parseInt(d, )" -> "64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )"
"53 : cents = Integer.parseInt(c, )"
"53 : cents = Integer.parseInt(c, )" -> "69 : E = new InFullExpense(cal, dollars, cents, payee, cat, )"
"53 : cents = Integer.parseInt(c, )" -> "64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )"
"54 : cal = new GregorianCalendar(year, month, day, )"
"54 : cal = new GregorianCalendar(year, month, day, )" -> "69 : E = new InFullExpense(cal, dollars, cents, payee, cat, )"
"54 : cal = new GregorianCalendar(year, month, day, )" -> "64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )"
"55 : type.equals(\"partial\", )"
"57 : System.out.println(\"Expense Balance: \", )"
"58 : amtdue = sc.nextLine()"
"59 : index = amtdue.indexOf(\".\", )"
"59 : index = amtdue.indexOf(\".\", )" -> "60 : dRem = amtdue.substring(0, index, )"
"59 : index = amtdue.indexOf(\".\", )" -> "61 : cRem = amtdue.substring(index + 1, amtdue.length(), )"
"60 : dRem = amtdue.substring(0, index, )"
"60 : dRem = amtdue.substring(0, index, )" -> "62 : dollRem = Integer.parseInt(dRem, )"
"61 : cRem = amtdue.substring(index + 1, amtdue.length(), )"
"61 : cRem = amtdue.substring(index + 1, amtdue.length(), )" -> "63 : centRem = Integer.parseInt(cRem, )"
"62 : dollRem = Integer.parseInt(dRem, )"
"62 : dollRem = Integer.parseInt(dRem, )" -> "64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )"
"63 : centRem = Integer.parseInt(cRem, )"
"63 : centRem = Integer.parseInt(cRem, )" -> "64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )"
"64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )"
"64 : E = new PartialExpense(cal, dollars, cents, dollRem, centRem, payee, cat, )" -> "65 : expenses.add(E, )"
"65 : expenses.add(E, )"
"69 : E = new InFullExpense(cal, dollars, cents, payee, cat, )"
"69 : E = new InFullExpense(cal, dollars, cents, payee, cat, )" -> "70 : expenses.add(E, )"
"70 : expenses.add(E, )"
}