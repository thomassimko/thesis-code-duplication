digraph G {
"75 : System.out.println(\"Keys to sort by: \", )"
"76 : sc.nextLine()"
"77 : SR = new Scanner(sc.nextLine(), )"
"78 : key1 = SR.next()"
"78 : key1 = SR.next()" -> "79 : checkKey(key1, )"
"78 : key1 = SR.next()" -> "80 : comp1 = getComparator(key1, )"
"79 : checkKey(key1, )"
"80 : comp1 = getComparator(key1, )"
"80 : comp1 = getComparator(key1, )" -> "125 : EDC1 = new ExpenseDelegateComparator(comp1, EDC2, )"
"80 : comp1 = getComparator(key1, )" -> "115 : Collections.sort(expenses, comp1, )"
"80 : comp1 = getComparator(key1, )" -> "119 : EDC = new ExpenseDelegateComparator(comp1, comp2, )"
"80 : comp1 = getComparator(key1, )" -> "132 : EDC1 = new ExpenseDelegateComparator(comp1, EDC2, )"
"81 : comp2 = null"
"81 : comp2 = null" -> "119 : EDC = new ExpenseDelegateComparator(comp1, comp2, )"
"81 : comp2 = null" -> "131 : EDC2 = new ExpenseDelegateComparator(comp2, EDC3, )"
"81 : comp2 = null" -> "124 : EDC2 = new ExpenseDelegateComparator(comp2, comp3, )"
"81 : comp2 = null" -> "91 : comp2 = getComparator(key2, )" [style=dashed]
"82 : comp3 = null"
"82 : comp3 = null" -> "130 : EDC3 = new ExpenseDelegateComparator(comp3, comp4, )"
"82 : comp3 = null" -> "124 : EDC2 = new ExpenseDelegateComparator(comp2, comp3, )"
"82 : comp3 = null" -> "98 : comp3 = getComparator(key3, )" [style=dashed]
"83 : comp4 = null"
"83 : comp4 = null" -> "130 : EDC3 = new ExpenseDelegateComparator(comp3, comp4, )"
"83 : comp4 = null" -> "105 : comp4 = getComparator(key4, )" [style=dashed]
"85 : numkeys = 1"
"85 : numkeys = 1" -> "117 : numkeys == 2"
"85 : numkeys = 1" -> "113 : numkeys == 1"
"85 : numkeys = 1" -> "122 : numkeys == 3"
"85 : numkeys = 1" -> "92 : numkeys = 2" [style=dashed]
"87 : SR.hasNext()"
"89 : key2 = SR.next()"
"89 : key2 = SR.next()" -> "90 : checkKey(key2, )"
"89 : key2 = SR.next()" -> "91 : comp2 = getComparator(key2, )"
"90 : checkKey(key2, )"
"91 : comp2 = getComparator(key2, )"
"91 : comp2 = getComparator(key2, )" -> "119 : EDC = new ExpenseDelegateComparator(comp1, comp2, )"
"91 : comp2 = getComparator(key2, )" -> "131 : EDC2 = new ExpenseDelegateComparator(comp2, EDC3, )"
"91 : comp2 = getComparator(key2, )" -> "124 : EDC2 = new ExpenseDelegateComparator(comp2, comp3, )"
"92 : numkeys = 2"
"92 : numkeys = 2" -> "117 : numkeys == 2"
"92 : numkeys = 2" -> "113 : numkeys == 1"
"92 : numkeys = 2" -> "122 : numkeys == 3"
"92 : numkeys = 2" -> "99 : numkeys = 3" [style=dashed]
"94 : SR.hasNext()"
"96 : key3 = SR.next()"
"96 : key3 = SR.next()" -> "97 : checkKey(key3, )"
"96 : key3 = SR.next()" -> "98 : comp3 = getComparator(key3, )"
"97 : checkKey(key3, )"
"98 : comp3 = getComparator(key3, )"
"98 : comp3 = getComparator(key3, )" -> "130 : EDC3 = new ExpenseDelegateComparator(comp3, comp4, )"
"98 : comp3 = getComparator(key3, )" -> "124 : EDC2 = new ExpenseDelegateComparator(comp2, comp3, )"
"99 : numkeys = 3"
"99 : numkeys = 3" -> "117 : numkeys == 2"
"99 : numkeys = 3" -> "113 : numkeys == 1"
"99 : numkeys = 3" -> "122 : numkeys == 3"
"99 : numkeys = 3" -> "106 : numkeys = 4" [style=dashed]
"101 : SR.hasNext()"
"103 : key4 = SR.next()"
"103 : key4 = SR.next()" -> "105 : comp4 = getComparator(key4, )"
"103 : key4 = SR.next()" -> "104 : checkKey(key4, )"
"104 : checkKey(key4, )"
"105 : comp4 = getComparator(key4, )"
"105 : comp4 = getComparator(key4, )" -> "130 : EDC3 = new ExpenseDelegateComparator(comp3, comp4, )"
"106 : numkeys = 4"
"106 : numkeys = 4" -> "117 : numkeys == 2"
"106 : numkeys = 4" -> "113 : numkeys == 1"
"106 : numkeys = 4" -> "122 : numkeys == 3"
"111 : SR.close()"
"113 : numkeys == 1"
"115 : Collections.sort(expenses, comp1, )"
"117 : numkeys == 2"
"119 : EDC = new ExpenseDelegateComparator(comp1, comp2, )"
"119 : EDC = new ExpenseDelegateComparator(comp1, comp2, )" -> "120 : Collections.sort(expenses, EDC, )"
"120 : Collections.sort(expenses, EDC, )"
"122 : numkeys == 3"
"124 : EDC2 = new ExpenseDelegateComparator(comp2, comp3, )"
"124 : EDC2 = new ExpenseDelegateComparator(comp2, comp3, )" -> "125 : EDC1 = new ExpenseDelegateComparator(comp1, EDC2, )"
"125 : EDC1 = new ExpenseDelegateComparator(comp1, EDC2, )"
"125 : EDC1 = new ExpenseDelegateComparator(comp1, EDC2, )" -> "126 : Collections.sort(expenses, EDC1, )"
"126 : Collections.sort(expenses, EDC1, )"
"130 : EDC3 = new ExpenseDelegateComparator(comp3, comp4, )"
"130 : EDC3 = new ExpenseDelegateComparator(comp3, comp4, )" -> "131 : EDC2 = new ExpenseDelegateComparator(comp2, EDC3, )"
"131 : EDC2 = new ExpenseDelegateComparator(comp2, EDC3, )"
"131 : EDC2 = new ExpenseDelegateComparator(comp2, EDC3, )" -> "132 : EDC1 = new ExpenseDelegateComparator(comp1, EDC2, )"
"132 : EDC1 = new ExpenseDelegateComparator(comp1, EDC2, )"
"132 : EDC1 = new ExpenseDelegateComparator(comp1, EDC2, )" -> "133 : Collections.sort(expenses, EDC1, )"
"133 : Collections.sort(expenses, EDC1, )"
}