digraph G {
"5 : ARBITRARY_BINDING = 0.0"
"5 : ARBITRARY_BINDING = 0.0" -> "16 : bind = new Binding(ARBITRARY_BINDING, )"
"6 : first = new DoubleConstantExpression(10, )"
"6 : first = new DoubleConstantExpression(10, )" -> "11 : divThis = new DivideExpression(first, second, )"
"6 : first = new DoubleConstantExpression(10, )" -> "10 : multThis = new MultiplyExpression(first, second, )"
"6 : first = new DoubleConstantExpression(10, )" -> "8 : addThis = new AddExpression(first, second, )"
"6 : first = new DoubleConstantExpression(10, )" -> "9 : subThis = new SubtractExpression(first, second, )"
"6 : first = new DoubleConstantExpression(10, )" -> "14 : assThis = new Assignment(\"myName\", first, )"
"6 : first = new DoubleConstantExpression(10, )" -> "12 : negThis = new NegationExpression(first, )"
"7 : second = new DoubleConstantExpression(20, )"
"7 : second = new DoubleConstantExpression(20, )" -> "11 : divThis = new DivideExpression(first, second, )"
"7 : second = new DoubleConstantExpression(20, )" -> "10 : multThis = new MultiplyExpression(first, second, )"
"7 : second = new DoubleConstantExpression(20, )" -> "8 : addThis = new AddExpression(first, second, )"
"7 : second = new DoubleConstantExpression(20, )" -> "9 : subThis = new SubtractExpression(first, second, )"
"8 : addThis = new AddExpression(first, second, )"
"9 : subThis = new SubtractExpression(first, second, )"
"10 : multThis = new MultiplyExpression(first, second, )"
"11 : divThis = new DivideExpression(first, second, )"
"12 : negThis = new NegationExpression(first, )"
"13 : idThis = new IdentifierExpression(\"myName\", )"
"14 : assThis = new Assignment(\"myName\", first, )"
"15 : bindId = new Binding(\"myName\", 10, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )" -> "20 : Check.check(addThis.evaluate(bind, ), 30, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )" -> "21 : Check.check(subThis.evaluate(bind, ), 10, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )" -> "18 : Check.check(first.evaluate(bind, ), 10, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )" -> "28 : Check.check(assThis.evaluate(bind, ), 10, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )" -> "23 : Check.check(divThis.evaluate(bind, ), 0.5, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )" -> "22 : Check.check(multThis.evaluate(bind, ), 200, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )" -> "24 : Check.check(negThis.evaluate(bind, ), 10, )"
"16 : bind = new Binding(ARBITRARY_BINDING, )" -> "19 : Check.check(second.evaluate(bind, ), 20, )"
"18 : Check.check(first.evaluate(bind, ), 10, )"
"19 : Check.check(second.evaluate(bind, ), 20, )"
"20 : Check.check(addThis.evaluate(bind, ), 30, )"
"21 : Check.check(subThis.evaluate(bind, ), 10, )"
"22 : Check.check(multThis.evaluate(bind, ), 200, )"
"23 : Check.check(divThis.evaluate(bind, ), 0.5, )"
"24 : Check.check(negThis.evaluate(bind, ), 10, )"
"25 : Check.check(idThis.toString(), \"myName\", )"
"26 : Check.check(bindId.getString(), \"myName\", )"
"27 : Check.check(bindId.getValue(), 10, )"
"28 : Check.check(assThis.evaluate(bind, ), 10, )"
}