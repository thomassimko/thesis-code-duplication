digraph G {
"7 : a1 = new DoubleConstantExpression(1.5, )"
"7 : a1 = new DoubleConstantExpression(1.5, )" -> "11 : add = new AddExpression(a1, a2, )"
"7 : a1 = new DoubleConstantExpression(1.5, )" -> "14 : divide = new DivideExpression(a4, a1, )"
"7 : a1 = new DoubleConstantExpression(1.5, )" -> "16 : all = new NegationExpression(new AddExpression(a1, new SubtractExpression(a4, new DivideExpression(a2, multiply, ), ), ), )"
"7 : a1 = new DoubleConstantExpression(1.5, )" -> "20 : varTest = new AddExpression(a1, id, )"
"7 : a1 = new DoubleConstantExpression(1.5, )" -> "12 : subtract = new SubtractExpression(a4, a1, )"
"8 : a2 = new DoubleConstantExpression(2.0, )"
"8 : a2 = new DoubleConstantExpression(2.0, )" -> "11 : add = new AddExpression(a1, a2, )"
"8 : a2 = new DoubleConstantExpression(2.0, )" -> "16 : all = new NegationExpression(new AddExpression(a1, new SubtractExpression(a4, new DivideExpression(a2, multiply, ), ), ), )"
"8 : a2 = new DoubleConstantExpression(2.0, )" -> "13 : multiply = new MultiplyExpression(a2, a3, )"
"9 : a3 = new DoubleConstantExpression(2.5, )"
"9 : a3 = new DoubleConstantExpression(2.5, )" -> "13 : multiply = new MultiplyExpression(a2, a3, )"
"10 : a4 = new DoubleConstantExpression(3.0, )"
"10 : a4 = new DoubleConstantExpression(3.0, )" -> "14 : divide = new DivideExpression(a4, a1, )"
"10 : a4 = new DoubleConstantExpression(3.0, )" -> "16 : all = new NegationExpression(new AddExpression(a1, new SubtractExpression(a4, new DivideExpression(a2, multiply, ), ), ), )"
"10 : a4 = new DoubleConstantExpression(3.0, )" -> "12 : subtract = new SubtractExpression(a4, a1, )"
"11 : add = new AddExpression(a1, a2, )"
"11 : add = new AddExpression(a1, a2, )" -> "18 : assign = new Assignment(\"x\", add, )"
"12 : subtract = new SubtractExpression(a4, a1, )"
"13 : multiply = new MultiplyExpression(a2, a3, )"
"13 : multiply = new MultiplyExpression(a2, a3, )" -> "16 : all = new NegationExpression(new AddExpression(a1, new SubtractExpression(a4, new DivideExpression(a2, multiply, ), ), ), )"
"14 : divide = new DivideExpression(a4, a1, )"
"14 : divide = new DivideExpression(a4, a1, )" -> "15 : negative = new NegationExpression(divide, )"
"15 : negative = new NegationExpression(divide, )"
"16 : all = new NegationExpression(new AddExpression(a1, new SubtractExpression(a4, new DivideExpression(a2, multiply, ), ), ), )"
"17 : binder = new VariableBindings()"
"17 : binder = new VariableBindings()" -> "40 : assign.evaluate(binder, )"
"17 : binder = new VariableBindings()" -> "44 : Check.check(varTest.evaluate(binder, ), 5.0, )"
"17 : binder = new VariableBindings()" -> "41 : Check.check(id.evaluate(binder, ), 3.5, )"
"18 : assign = new Assignment(\"x\", add, )"
"19 : id = new IdentifierExpression(\"x\", )"
"19 : id = new IdentifierExpression(\"x\", )" -> "20 : varTest = new AddExpression(a1, id, )"
"20 : varTest = new AddExpression(a1, id, )"
"22 : Check.check(add.evaluate(null, ), 3.5, )"
"23 : Check.check(add.toString(), \"(1.5 + 2.0)\", )"
"25 : Check.check(subtract.evaluate(null, ), 1.5, )"
"26 : Check.check(subtract.toString(), \"(3.0 - 1.5)\", )"
"28 : Check.check(multiply.evaluate(null, ), 5.0, )"
"29 : Check.check(multiply.toString(), \"(2.0 * 2.5)\", )"
"31 : Check.check(divide.evaluate(null, ), 2.0, )"
"32 : Check.check(divide.toString(), \"(3.0 / 1.5)\", )"
"34 : Check.check(negative.evaluate(null, ), 2.0, )"
"35 : Check.check(negative.toString(), \"-(3.0 / 1.5)\", )"
"37 : Check.check(all.evaluate(null, ), 4.1, )"
"38 : Check.check(all.toString(), \"-(1.5 + (3.0 - (2.0 / (2.0 * 2.5))))\", )"
"40 : assign.evaluate(binder, )"
"41 : Check.check(id.evaluate(binder, ), 3.5, )"
"42 : Check.check(id.toString(), \"x\", )"
"44 : Check.check(varTest.evaluate(binder, ), 5.0, )"
"45 : Check.check(varTest.toString(), \"(1.5 + x)\", )"
}