function constructor1 from class ExpensePayeeComparator


function compare from class ExpensePayeeComparator

compareTo(o2.getPayee(), )

function constructor1 from class ExpenseCategoryComparator


function compare from class ExpenseCategoryComparator

compareTo(o2.getCategory(), )

function constructor1 from class ExpenseDelegateComparator
this.comp1 = null
this.comp2 = null

this.comp1 = comp1
this.comp2 = comp2

function compare from class ExpenseDelegateComparator
this.comp1 = null
this.comp2 = null

firstComparison = this.comp1.compare(o1, o2, )
firstComparison == 0

this.comp2.compare(o1, o2, )


function constructor1 from class ExpenseDateComparator


function compare from class ExpenseDateComparator

after(o2.getDate(), )

1

before(o2.getDate(), )

1


0

function constructor1 from class FullExpense
this.date = null
this.category = null
this.payee = null
this.amountPaid = 0.0

this.date = date
this.category = category
this.payee = payee
this.amountPaid = amountPaid

function getType from class FullExpense
this.date = null
this.category = null
this.payee = null
this.amountPaid = 0.0

"in-full"

function getDate from class FullExpense
this.date = null
this.category = null
this.payee = null
this.amountPaid = 0.0


function getCategory from class FullExpense
this.date = null
this.category = null
this.payee = null
this.amountPaid = 0.0


function getPayee from class FullExpense
this.date = null
this.category = null
this.payee = null
this.amountPaid = 0.0


function getAmountPaid from class FullExpense
this.date = null
this.category = null
this.payee = null
this.amountPaid = 0.0


function constructor1 from class ExpenseAmountComparator


function compare from class ExpenseAmountComparator

o1.getAmountPaid() > o2.getAmountPaid()

1

o1.getAmountPaid() < o2.getAmountPaid()

1


0

function main from class Expensify

s = null
out = null
scan = new Scanner(System.in, )
expenseList = new ArrayList()
error = false

date = null
category = null
payee = null
amount = 0.0
remainingAmount = 0.0
s = new Scanner(new BufferedReader(new FileReader("StoredExpenses", ), ), )
s.hasNextLine()


str = s.nextLine()
str.equals("in-full", )


df = new SimpleDateFormat("MM/dd/yyyy", )
date = df.parse(s.nextLine(), )
category = s.nextLine()
payee = s.nextLine()
amount = Double.parseDouble(s.nextLine(), )
expenseList.add(new FullExpense(date, category, payee, amount, ), )

str.equals("partial", )

df = new SimpleDateFormat("MM/dd/yyyy", )
date = df.parse(s.nextLine(), )
category = s.nextLine()
payee = s.nextLine()
amount = Double.parseDouble(s.nextLine(), )
remainingAmount = Double.parseDouble(s.nextLine(), )
expenseList.add(new PartialExpense(date, category, payee, amount, remainingAmount, ), )


s.hasNextLine()

System.out.print("File Not Completely Loaded\n", )
error = true

System.out.print("File Not Completely Loaded\n", )
error = true

System.out.print("File Loaded\n", )

choice = 0
true

System.out.println("\n1. Display", )
System.out.println("2. Add Expense", )
System.out.println("3. Sort", )
System.out.println("4. Save", )
System.out.println("5. Quit", )
System.out.print("\nEnter choice: ", )
choice = Integer.parseInt(scan.next(), )
choice == 5




exp = expenseList
strOut = null
expDate = exp.getDate()
expPayee = exp.getPayee()
expAmount = exp.getAmountPaid()
expCategory = exp.getCategory()
exp instanceof PartialExpense

System.out.print("\n", )

expRemaining = getRemainingAmount()
strOut = String.format("%1$2tm/%<2td/%<tY ", expDate, ) + String.format("%-15.15s %10s (%s) [%s]", expPayee, expAmount.toString(), expRemaining.toString(), expCategory, )

strOut = String.format("%1$2tm/%<2td/%<tY ", expDate, ) + String.format("%-15.15s %10s [%s]", expPayee, expAmount.toString(), expCategory, )

System.out.print("\n" + strOut, )

listNew = new ArrayList()
listNew.add(new FullExpense(date, category, payee, amount, ), )
listNew.addAll(expenseList, )
expenseList = listNew

System.out.print("Expense Balance: ", )
remainingAmount = Double.parseDouble(scan.next(), )
listNew = new ArrayList()
listNew.add(new PartialExpense(date, category, payee, amount, remainingAmount, ), )
listNew.addAll(expenseList, )
expenseList = listNew


out = new FileWriter("StoredExpenses", )


exp = expenseList
exp instanceof PartialExpense

out.flush()

out.write("partial\r\n", )
out.write(format(exp.getDate(), ) + "\r\n", )
out.write(exp.getCategory() + "\r\n", )
out.write(exp.getPayee() + "\r\n", )
out.write(Double.toString(exp.getAmountPaid(), ) + "\r\n", )
out.write(Double.toString(getRemainingAmount(), ) + "\r\n", )

out.write("in-full\r\n", )
out.write(format(exp.getDate(), ) + "\r\n", )
out.write(exp.getCategory() + "\r\n", )
out.write(exp.getPayee() + "\r\n", )
out.write(Double.toString(exp.getAmountPaid(), ) + "\r\n", )


out != null

out.close()


function comparatorBuilder from class Expensify

comp.equals("date", )

c = new ExpenseDateComparator()

comp.equals("amount", )

c = new ExpenseAmountComparator()

comp.equals("category", )

c = new ExpenseCategoryComparator()

comp.equals("payee", )

c = new ExpensePayeeComparator()




null

function recursiveComparator from class Expensify

comp = comparatorBuilder(compArr[i], )
i == compArr.length - 1


new ExpenseDelegateComparator(comp, recursiveComparator(compArr, i + 1, ), )

function constructor1 from class PartialExpense
this.remainingAmount = 0.0

this.remainingAmount = remainingAmount

function getRemainingAmount from class PartialExpense
this.remainingAmount = 0.0


